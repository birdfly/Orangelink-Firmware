<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\app.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\app.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Thu Jul 08 21:41:13 2021
<BR><P>
<H3>Maximum Stack Usage =       1216 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
aps_cmd_loop &rArr; cmd_send_and_listen &rArr; Subg_SendPkt &rArr; omnipod_tx &rArr; Rf69_SetMode &rArr; spi_read_reg &rArr; spi_select &rArr; nrf_drv_spi_init &rArr; nrfx_spim_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">NMI_Handler</a><BR>
 <LI><a href="#[3]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">HardFault_Handler</a><BR>
 <LI><a href="#[4]">MemoryManagement_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">MemoryManagement_Handler</a><BR>
 <LI><a href="#[5]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">BusFault_Handler</a><BR>
 <LI><a href="#[6]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">UsageFault_Handler</a><BR>
 <LI><a href="#[7]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">SVC_Handler</a><BR>
 <LI><a href="#[8]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">DebugMon_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[a]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SysTick_Handler</a><BR>
 <LI><a href="#[19]">CCM_AAR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">CCM_AAR_IRQHandler</a><BR>
 <LI><a href="#[59]">nrf_fstorage_sys_evt_handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[194]">queue_process</a><BR>
 <LI><a href="#[64]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[64]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close</a><BR>
 <LI><a href="#[63]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[63]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[5]">BusFault_Handler</a> from arm_startup_nrf52810.o(.text) referenced from arm_startup_nrf52810.o(RESET)
 <LI><a href="#[19]">CCM_AAR_IRQHandler</a> from arm_startup_nrf52810.o(.text) referenced from arm_startup_nrf52810.o(RESET)
 <LI><a href="#[1d]">COMP_IRQHandler</a> from arm_startup_nrf52810.o(.text) referenced from arm_startup_nrf52810.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from arm_startup_nrf52810.o(.text) referenced from arm_startup_nrf52810.o(RESET)
 <LI><a href="#[18]">ECB_IRQHandler</a> from arm_startup_nrf52810.o(.text) referenced from arm_startup_nrf52810.o(RESET)
 <LI><a href="#[10]">GPIOTE_IRQHandler</a> from arm_startup_nrf52810.o(.text) referenced from arm_startup_nrf52810.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from arm_startup_nrf52810.o(.text) referenced from arm_startup_nrf52810.o(RESET)
 <LI><a href="#[4]">MemoryManagement_Handler</a> from arm_startup_nrf52810.o(.text) referenced from arm_startup_nrf52810.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from arm_startup_nrf52810.o(.text) referenced from arm_startup_nrf52810.o(RESET)
 <LI><a href="#[25]">PDM_IRQHandler</a> from arm_startup_nrf52810.o(.text) referenced from arm_startup_nrf52810.o(RESET)
 <LI><a href="#[b]">POWER_CLOCK_IRQHandler</a> from nrfx_power.o(i.POWER_CLOCK_IRQHandler) referenced from arm_startup_nrf52810.o(RESET)
 <LI><a href="#[24]">PWM0_IRQHandler</a> from nrfx_pwm.o(i.PWM0_IRQHandler) referenced from arm_startup_nrf52810.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from arm_startup_nrf52810.o(.text) referenced from arm_startup_nrf52810.o(RESET)
 <LI><a href="#[1c]">QDEC_IRQHandler</a> from arm_startup_nrf52810.o(.text) referenced from arm_startup_nrf52810.o(RESET)
 <LI><a href="#[c]">RADIO_IRQHandler</a> from arm_startup_nrf52810.o(.text) referenced from arm_startup_nrf52810.o(RESET)
 <LI><a href="#[17]">RNG_IRQHandler</a> from arm_startup_nrf52810.o(.text) referenced from arm_startup_nrf52810.o(RESET)
 <LI><a href="#[15]">RTC0_IRQHandler</a> from arm_startup_nrf52810.o(.text) referenced from arm_startup_nrf52810.o(RESET)
 <LI><a href="#[1b]">RTC1_IRQHandler</a> from app_timer.o(i.RTC1_IRQHandler) referenced from arm_startup_nrf52810.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from arm_startup_nrf52810.o(.text) referenced from arm_startup_nrf52810.o(RESET)
 <LI><a href="#[11]">SAADC_IRQHandler</a> from nrfx_saadc.o(i.SAADC_IRQHandler) referenced from arm_startup_nrf52810.o(RESET)
 <LI><a href="#[f]">SPIM0_SPIS0_SPI0_IRQHandler</a> from nrfx_spim.o(i.SPIM0_SPIS0_SPI0_IRQHandler) referenced from nrfx_spim.o(.constdata)
 <LI><a href="#[f]">SPIM0_SPIS0_SPI0_IRQHandler</a> from nrfx_spim.o(i.SPIM0_SPIS0_SPI0_IRQHandler) referenced from arm_startup_nrf52810.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from arm_startup_nrf52810.o(.text) referenced from arm_startup_nrf52810.o(RESET)
 <LI><a href="#[1e]">SWI0_EGU0_IRQHandler</a> from app_timer.o(i.SWI0_EGU0_IRQHandler) referenced from arm_startup_nrf52810.o(RESET)
 <LI><a href="#[1f]">SWI1_EGU1_IRQHandler</a> from arm_startup_nrf52810.o(.text) referenced from arm_startup_nrf52810.o(RESET)
 <LI><a href="#[20]">SWI2_IRQHandler</a> from nrf_sdh.o(i.SWI2_IRQHandler) referenced from arm_startup_nrf52810.o(RESET)
 <LI><a href="#[21]">SWI3_IRQHandler</a> from arm_startup_nrf52810.o(.text) referenced from arm_startup_nrf52810.o(RESET)
 <LI><a href="#[22]">SWI4_IRQHandler</a> from arm_startup_nrf52810.o(.text) referenced from arm_startup_nrf52810.o(RESET)
 <LI><a href="#[23]">SWI5_IRQHandler</a> from arm_startup_nrf52810.o(.text) referenced from arm_startup_nrf52810.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from arm_startup_nrf52810.o(.text) referenced from arm_startup_nrf52810.o(RESET)
 <LI><a href="#[27]">SystemInit</a> from system_nrf52810.o(i.SystemInit) referenced from arm_startup_nrf52810.o(.text)
 <LI><a href="#[16]">TEMP_IRQHandler</a> from arm_startup_nrf52810.o(.text) referenced from arm_startup_nrf52810.o(RESET)
 <LI><a href="#[12]">TIMER0_IRQHandler</a> from arm_startup_nrf52810.o(.text) referenced from arm_startup_nrf52810.o(RESET)
 <LI><a href="#[13]">TIMER1_IRQHandler</a> from nrfx_timer.o(i.TIMER1_IRQHandler) referenced from arm_startup_nrf52810.o(RESET)
 <LI><a href="#[14]">TIMER2_IRQHandler</a> from arm_startup_nrf52810.o(.text) referenced from arm_startup_nrf52810.o(RESET)
 <LI><a href="#[e]">TWIM0_TWIS0_TWI0_IRQHandler</a> from arm_startup_nrf52810.o(.text) referenced from arm_startup_nrf52810.o(RESET)
 <LI><a href="#[d]">UARTE0_UART0_IRQHandler</a> from nrfx_prs.o(i.UARTE0_UART0_IRQHandler) referenced from arm_startup_nrf52810.o(RESET)
 <LI><a href="#[6]">UsageFault_Handler</a> from arm_startup_nrf52810.o(.text) referenced from arm_startup_nrf52810.o(RESET)
 <LI><a href="#[1a]">WDT_IRQHandler</a> from nrfx_wdt.o(i.WDT_IRQHandler) referenced from arm_startup_nrf52810.o(RESET)
 <LI><a href="#[28]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from arm_startup_nrf52810.o(.text)
 <LI><a href="#[3a]">adc_callback</a> from app_battery.o(i.adc_callback) referenced from app_battery.o(i.batt_detect)
 <LI><a href="#[40]">app_error_fault_handler</a> from app_error_weak.o(i.app_error_fault_handler) referenced from nrf_sdh.o(i.nrf_sdh_enable_request)
 <LI><a href="#[29]">aps_cmd_loop</a> from app_aps.o(i.aps_cmd_loop) referenced from app_aps.o(i.Aps_Init)
 <LI><a href="#[2a]">batt_low_check_handle</a> from app_battery.o(i.batt_low_check_handle) referenced from app_battery.o(i.Batt_Init)
 <LI><a href="#[2e]">battery_level_update_handle</a> from app_ble.o(i.battery_level_update_handle) referenced from app_ble.o(i.Ble_Init)
 <LI><a href="#[4f]">ble_advertising_on_ble_evt</a> from ble_advertising.o(i.ble_advertising_on_ble_evt) referenced from app_ble.o(sdh_ble_observers1)
 <LI><a href="#[5a]">ble_advertising_on_sys_evt</a> from ble_advertising.o(i.ble_advertising_on_sys_evt) referenced from app_ble.o(sdh_soc_observers1)
 <LI><a href="#[54]">ble_bas_on_ble_evt</a> from ble_bas.o(i.ble_bas_on_ble_evt) referenced from app_ble.o(sdh_ble_observers2)
 <LI><a href="#[55]">ble_dfu_buttonless_on_ble_evt</a> from ble_dfu.o(i.ble_dfu_buttonless_on_ble_evt) referenced from ble_dfu.o(sdh_ble_observers2)
 <LI><a href="#[5c]">ble_dfu_buttonless_on_sys_evt</a> from ble_dfu_unbonded.o(i.ble_dfu_buttonless_on_sys_evt) referenced from ble_dfu_unbonded.o(sdh_soc_observers1)
 <LI><a href="#[43]">ble_dfu_evt_handler</a> from app_ble.o(i.ble_dfu_evt_handler) referenced from app_ble.o(i.services_init)
 <LI><a href="#[4d]">ble_evt_handler</a> from ble_conn_state.o(i.ble_evt_handler) referenced from ble_conn_state.o(sdh_ble_observers0)
 <LI><a href="#[50]">ble_evt_handler</a> from ble_conn_params.o(i.ble_evt_handler) referenced from ble_conn_params.o(sdh_ble_observers1)
 <LI><a href="#[56]">ble_evt_handler</a> from app_ble.o(i.ble_evt_handler) referenced from app_ble.o(sdh_ble_observers3)
 <LI><a href="#[52]">ble_ips_on_ble_evt</a> from ble_ips.o(i.ble_ips_on_ble_evt) referenced from app_ble.o(sdh_ble_observers2)
 <LI><a href="#[3d]">ble_ips_timer_tick_handle</a> from ble_ips.o(i.ble_ips_timer_tick_handle) referenced from ble_ips.o(i.ble_ips_init)
 <LI><a href="#[51]">ble_nus_on_ble_evt</a> from ble_nus.o(i.ble_nus_on_ble_evt) referenced from app_ble.o(sdh_ble_observers2)
 <LI><a href="#[2f]">buzzer_timer_handle</a> from buzzer.o(i.buzzer_timer_handle) referenced from buzzer.o(i.Buzzer_Init)
 <LI><a href="#[30]">cfg_req_loop</a> from app_config.o(i.cfg_req_loop) referenced from app_config.o(i.Cfg_Init)
 <LI><a href="#[31]">cfg_update_handle</a> from app_config.o(i.cfg_update_handle) referenced from app_config.o(i.Cfg_Init)
 <LI><a href="#[3e]">clock_irq_handler</a> from nrf_drv_clock.o(i.clock_irq_handler) referenced from nrf_drv_clock.o(i.nrf_drv_clock_init)
 <LI><a href="#[2d]">conn_params_error_handler</a> from app_ble.o(i.conn_params_error_handler) referenced from app_ble.o(i.Ble_Init)
 <LI><a href="#[3c]">dummy_evt_handler</a> from ble_dfu.o(i.dummy_evt_handler) referenced from ble_dfu.o(i.ble_dfu_buttonless_init)
 <LI><a href="#[49]">erase</a> from nrf_fstorage_sd.o(i.erase) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[32]">fct_req_loop</a> from app_factory.o(i.fct_req_loop) referenced from app_factory.o(i.Fct_Init)
 <LI><a href="#[0]">flash_event_handle</a> from ocp.o(i.flash_event_handle) referenced 2 times from ocp.o(fs_data)
 <LI><a href="#[2b]">gatt_evt_handler</a> from app_ble.o(i.gatt_evt_handler) referenced from app_ble.o(i.Ble_Init)
 <LI><a href="#[45]">init</a> from nrf_fstorage_sd.o(i.init) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[42]">ips_data_handler</a> from app_ble.o(i.ips_data_handler) referenced from app_ble.o(i.services_init)
 <LI><a href="#[4c]">is_busy</a> from nrf_fstorage_sd.o(i.is_busy) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[35]">led_timer_handle</a> from led.o(i.led_timer_handle) referenced from led.o(i.Led_Init)
 <LI><a href="#[26]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[33]">motor_test_handle</a> from app_indication.o(i.motor_test_handle) referenced from app_indication.o(i.Idc_Init)
 <LI><a href="#[36]">motor_timer_handle</a> from motor.o(i.motor_timer_handle) referenced from motor.o(i.Motor_Init)
 <LI><a href="#[4e]">nrf_ble_gatt_on_ble_evt</a> from nrf_ble_gatt.o(i.nrf_ble_gatt_on_ble_evt) referenced from app_ble.o(sdh_ble_observers1)
 <LI><a href="#[53]">nrf_ble_qwr_on_ble_evt</a> from nrf_ble_qwr.o(i.nrf_ble_qwr_on_ble_evt) referenced from app_ble.o(sdh_ble_observers2)
 <LI><a href="#[57]">nrf_fstorage_sdh_req_handler</a> from nrf_fstorage_sd.o(i.nrf_fstorage_sdh_req_handler) referenced from nrf_fstorage_sd.o(sdh_req_observers0)
 <LI><a href="#[60]">nrf_fstorage_sdh_state_handler</a> from nrf_fstorage_sd.o(i.nrf_fstorage_sdh_state_handler) referenced from nrf_fstorage_sd.o(sdh_state_observers0)
 <LI><a href="#[59]">nrf_fstorage_sys_evt_handler</a> from nrf_fstorage_sd.o(i.nrf_fstorage_sys_evt_handler) referenced from nrf_fstorage_sd.o(sdh_soc_observers0)
 <LI><a href="#[41]">nrf_qwr_error_handler</a> from app_ble.o(i.nrf_qwr_error_handler) referenced from app_ble.o(i.services_init)
 <LI><a href="#[5d]">nrf_sdh_ble_evts_poll</a> from nrf_sdh_ble.o(i.nrf_sdh_ble_evts_poll) referenced from nrf_sdh_ble.o(sdh_stack_observers0)
 <LI><a href="#[5e]">nrf_sdh_soc_evts_poll</a> from nrf_sdh_soc.o(i.nrf_sdh_soc_evts_poll) referenced from nrf_sdh_soc.o(sdh_stack_observers0)
 <LI><a href="#[44]">nus_data_handler</a> from app_ble.o(i.nus_data_handler) referenced from app_ble.o(i.services_init)
 <LI><a href="#[39]">on_adv_evt</a> from app_ble.o(i.on_adv_evt) referenced from app_ble.o(i.advertising_init)
 <LI><a href="#[2c]">on_conn_params_evt</a> from app_ble.o(i.on_conn_params_evt) referenced from app_ble.o(i.Ble_Init)
 <LI><a href="#[47]">read</a> from nrf_fstorage_sd.o(i.read) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[4a]">rmap</a> from nrf_fstorage_sd.o(i.rmap) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[5f]">sd_state_evt_handler</a> from nrf_drv_clock.o(i.sd_state_evt_handler) referenced from nrf_drv_clock.o(sdh_state_observers0)
 <LI><a href="#[58]">soc_evt_handler</a> from nrf_drv_clock.o(i.soc_evt_handler) referenced from nrf_drv_clock.o(sdh_soc_observers0)
 <LI><a href="#[5b]">soc_evt_handler</a> from app_ble.o(i.soc_evt_handler) referenced from app_ble.o(sdh_soc_observers1)
 <LI><a href="#[3f]">spim_evt_handler</a> from nrf_drv_spi.o(i.spim_evt_handler) referenced from nrf_drv_spi.o(i.nrf_drv_spi_init)
 <LI><a href="#[34]">state_check_handle</a> from app_indication.o(i.state_check_handle) referenced from app_indication.o(i.Idc_Init)
 <LI><a href="#[37]">timr_evt_handle</a> from ocp.o(i.timr_evt_handle) referenced from ocp.o(i.Timer_Init)
 <LI><a href="#[46]">uninit</a> from nrf_fstorage_sd.o(i.uninit) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[3b]">update_timeout_handler</a> from ble_conn_params.o(i.update_timeout_handler) referenced from ble_conn_params.o(i.ble_conn_params_init)
 <LI><a href="#[38]">wdt_event_handle</a> from ocp.o(i.wdt_event_handle) referenced from ocp.o(i.Wdt_Init)
 <LI><a href="#[4b]">wmap</a> from nrf_fstorage_sd.o(i.wmap) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[48]">write</a> from nrf_fstorage_sd.o(i.write) referenced from nrf_fstorage_sd.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[28]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52810.o(.text)
</UL>
<P><STRONG><a name="[1c1]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[61]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[74]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1c2]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1c3]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1c4]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1c5]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1c6]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[17f]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_req</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_alloc
</UL>

<P><STRONG><a name="[63]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_put
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close
</UL>

<P><STRONG><a name="[182]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_req</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_get
</UL>

<P><STRONG><a name="[64]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_free
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close
</UL>

<P><STRONG><a name="[17e]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_space_clear</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_clear
</UL>

<P><STRONG><a name="[188]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_mov</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_store
</UL>

<P><STRONG><a name="[186]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_orr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_or
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_or
</UL>

<P><STRONG><a name="[185]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_and</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_and
</UL>

<P><STRONG><a name="[1c7]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_eor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[1c8]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_add</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[1c9]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[1ca]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_cmp_exch</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[1cb]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub_hs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arm_startup_nrf52810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52810.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52810.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52810.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52810.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52810.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>MemoryManagement_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52810.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52810.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52810.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52810.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52810.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52810.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52810.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52810.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52810.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52810.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52810.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52810.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52810.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52810.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52810.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52810.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52810.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52810.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52810.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>PDM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52810.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52810.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>RADIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52810.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52810.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RTC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52810.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SWI1_EGU1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52810.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SWI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52810.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SWI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52810.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SWI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52810.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52810.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52810.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52810.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TWIM0_TWIS0_TWI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52810.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52810.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_timer_handle
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_timer_handle
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_timer_handle
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1cc]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subg_SendPkt
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kit_FifoStructOut
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kit_FifoStructIn
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encrypt_decode
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bytes_to_ble
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encrypt_encode
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_send_and_listen
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_pkt
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fct_PutReq
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_SetAdvName
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_PutReq
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aps_PutCmd
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_req_loop
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sn_burn
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_XmitBuf
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omnipod_tx
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_on_ctrl_pt_write
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
</UL>

<P><STRONG><a name="[a1]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_StorageLoad
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_handle_list_get
</UL>

<P><STRONG><a name="[1cd]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1ce]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1cf]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bytes_to_ble
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_send_and_listen
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_pkt
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aps_cmd_loop
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ips_init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fct_PutReq
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aps_PutCmd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omnipod_tx
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_level_char_add
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_char_add
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;descriptor_add
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characteristic_add
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uninit
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_128bit_uuid_characteristic_add
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
</UL>

<P><STRONG><a name="[1d0]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[150]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ips_init
</UL>

<P><STRONG><a name="[11b]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batt_detect
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batt_detect
</UL>

<P><STRONG><a name="[6d]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_SetFreq
</UL>

<P><STRONG><a name="[6f]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batt_detect
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_SetFreq
</UL>

<P><STRONG><a name="[11c]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batt_detect
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_SetFreq
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1d1]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[1d2]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>

<P><STRONG><a name="[70]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[6e]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[72]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>

<P><STRONG><a name="[62]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1d3]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1d4]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1d5]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>Aps_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, app_aps.o(i.Aps_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Aps_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kit_FifoStructCreate
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>Aps_PutCmd</STRONG> (Thumb, 96 bytes, Stack size 144 bytes, app_aps.o(i.Aps_PutCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = Aps_PutCmd &rArr; cmd_update_reg &rArr; send_byte_to_ble &rArr; Ble_IpsNotifyRespCntAndSendData &rArr; ble_ips_data_send
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subg_SetIntFlg
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kit_FifoStructIn
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_update_reg
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips_data_handler
</UL>

<P><STRONG><a name="[7e]"></a>Aps_StartLoop</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, app_aps.o(i.Aps_StartLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Aps_StartLoop &rArr; app_timer_start &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[80]"></a>Aps_StopLoop</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_aps.o(i.Aps_StopLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Aps_StopLoop &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[121]"></a>Batt_GetLevel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_battery.o(i.Batt_GetLevel))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_level_update_handle
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fct_req_loop
</UL>

<P><STRONG><a name="[15d]"></a>Batt_GetVoltage</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_battery.o(i.Batt_GetVoltage))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_req_loop
</UL>

<P><STRONG><a name="[82]"></a>Batt_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, app_battery.o(i.Batt_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Batt_Init &rArr; batt_detect &rArr; nrfx_saadc_uninit &rArr; nrfx_saadc_channel_uninit &rArr; nrfx_saadc_limits_set
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batt_detect
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a8]"></a>Batt_IsLow</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, app_battery.o(i.Batt_IsLow))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fct_StopLoop
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_check_handle
</UL>

<P><STRONG><a name="[a9]"></a>Ble_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_ble.o(i.Ble_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subg_SendPkt
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batt_low_check_handle
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fct_StopLoop
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omnipod_rx
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minimed_rx
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_check_handle
</UL>

<P><STRONG><a name="[85]"></a>Ble_Init</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, app_ble.o(i.Ble_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = Ble_Init &rArr; services_init &rArr; ble_ips_init &rArr; user_128bit_uuid_characteristic_add
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_enable
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_default_cfg_set
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_att_mtu_periph_set
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_async_svci_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_StorageLoad
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_GetAdvNameLen
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_GetAdvName
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[93]"></a>Ble_IpsNotifyRespCntAndSendData</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_ble.o(i.Ble_IpsNotifyRespCntAndSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Ble_IpsNotifyRespCntAndSendData &rArr; ble_ips_data_send
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ips_response_cnt_notify
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ips_data_send
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bytes_to_ble
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_byte_to_ble
</UL>

<P><STRONG><a name="[96]"></a>Ble_NusSendData</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, app_ble.o(i.Ble_NusSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Ble_NusSendData &rArr; ble_nus_data_send &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_data_send
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_data_set
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_req_loop
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subg_send_and_listen
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sn_burn
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fct_req_loop
</UL>

<P><STRONG><a name="[98]"></a>Buzzer_Ctrl</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, buzzer.o(i.Buzzer_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Buzzer_Ctrl &rArr; buzzer_timer_handle &rArr; buzzer_on &rArr; nrfx_pwm_init &rArr; configure_pins
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_timer_handle
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_off
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_req_loop
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idc_Init
</UL>

<P><STRONG><a name="[9a]"></a>Buzzer_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, buzzer.o(i.Buzzer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Buzzer_Init &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idc_Init
</UL>

<P><STRONG><a name="[8c]"></a>Cfg_GetAdvName</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_config.o(i.Cfg_GetAdvName))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[8b]"></a>Cfg_GetAdvNameLen</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_config.o(i.Cfg_GetAdvNameLen))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[b5]"></a>Cfg_GetMotionData0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_config.o(i.Cfg_GetMotionData0))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idc_SetType
</UL>

<P><STRONG><a name="[b6]"></a>Cfg_GetMotionData1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_config.o(i.Cfg_GetMotionData1))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idc_SetType
</UL>

<P><STRONG><a name="[9b]"></a>Cfg_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, app_config.o(i.Cfg_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Cfg_Init &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kit_FifoStructCreate
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9c]"></a>Cfg_PutReq</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, app_config.o(i.Cfg_PutReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Cfg_PutReq &rArr; Kit_FifoStructIn
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kit_FifoStructIn
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
</UL>

<P><STRONG><a name="[9d]"></a>Cfg_SetAdvName</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_config.o(i.Cfg_SetAdvName))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Cfg_SetAdvName &rArr; app_timer_start &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips_data_handler
</UL>

<P><STRONG><a name="[9e]"></a>Cfg_StartLoop</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, app_config.o(i.Cfg_StartLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Cfg_StartLoop &rArr; app_timer_start &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[9f]"></a>Cfg_StopLoop</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_config.o(i.Cfg_StopLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Cfg_StopLoop &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[8a]"></a>Cfg_StorageLoad</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, app_config.o(i.Cfg_StorageLoad))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Cfg_StorageLoad &rArr; Flash_Write &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Init
</UL>

<P><STRONG><a name="[f3]"></a>Dcdc_Enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ocp.o(i.Dcdc_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[a3]"></a>Fct_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, app_factory.o(i.Fct_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Fct_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kit_FifoStructCreate
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a4]"></a>Fct_PutReq</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, app_factory.o(i.Fct_PutReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Fct_PutReq &rArr; Kit_FifoStructIn
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subg_SetIntFlg
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kit_FifoStructIn
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
</UL>

<P><STRONG><a name="[a5]"></a>Fct_StartLoop</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, app_factory.o(i.Fct_StartLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Fct_StartLoop &rArr; Idc_SetType &rArr; Motor_Ctrl &rArr; motor_timer_handle &rArr; motor_on &rArr; nrfx_pwm_init &rArr; configure_pins
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idc_SetType
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
</UL>

<P><STRONG><a name="[a7]"></a>Fct_StopLoop</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, app_factory.o(i.Fct_StopLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Fct_StopLoop &rArr; Idc_SetType &rArr; Motor_Ctrl &rArr; motor_timer_handle &rArr; motor_on &rArr; nrfx_pwm_init &rArr; configure_pins
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Batt_IsLow
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idc_SetType
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[aa]"></a>Flash_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ocp.o(i.Flash_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Flash_Init &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[a0]"></a>Flash_Read</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ocp.o(i.Flash_Read))
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_StorageLoad
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sn_burn
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fct_req_loop
</UL>

<P><STRONG><a name="[a2]"></a>Flash_Write</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ocp.o(i.Flash_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Flash_Write &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_flash_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_StorageLoad
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_update_handle
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sn_burn
</UL>

<P><STRONG><a name="[af]"></a>Idc_Init</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, app_indication.o(i.Idc_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = Idc_Init &rArr; Buzzer_Ctrl &rArr; buzzer_timer_handle &rArr; buzzer_on &rArr; nrfx_pwm_init &rArr; configure_pins
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kit_DelayMs
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Ctrl
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a6]"></a>Idc_SetType</STRONG> (Thumb, 218 bytes, Stack size 8 bytes, app_indication.o(i.Idc_SetType))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = Idc_SetType &rArr; Motor_Ctrl &rArr; motor_timer_handle &rArr; motor_on &rArr; nrfx_pwm_init &rArr; configure_pins
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Ctrl
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Ctrl
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_GetMotionData1
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_GetMotionData0
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batt_low_check_handle
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fct_StopLoop
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fct_StartLoop
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_check_handle
</UL>

<P><STRONG><a name="[b2]"></a>Kit_DelayMs</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, kit_delay.o(i.Kit_DelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Kit_DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subg_SendPkt
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batt_detect
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_fifo_not_full
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omnipod_tx
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minimed_tx
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idc_Init
</UL>

<P><STRONG><a name="[b8]"></a>Kit_DelayUs</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, kit_delay.o(i.Kit_DelayUs))
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omnipod_tx
</UL>

<P><STRONG><a name="[76]"></a>Kit_FifoStructCreate</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, kit_fifo.o(i.Kit_FifoStructCreate))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aps_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fct_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_Init
</UL>

<P><STRONG><a name="[7b]"></a>Kit_FifoStructIn</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, kit_fifo.o(i.Kit_FifoStructIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Kit_FifoStructIn
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fct_PutReq
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_PutReq
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aps_PutCmd
</UL>

<P><STRONG><a name="[b9]"></a>Kit_FifoStructOut</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, kit_fifo.o(i.Kit_FifoStructOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Kit_FifoStructOut
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aps_cmd_loop
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_req_loop
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fct_req_loop
</UL>

<P><STRONG><a name="[14e]"></a>Kit_PrintBytes</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kit_log.o(i.Kit_PrintBytes))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_send_and_listen
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_pkt
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ips_data_send
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips_data_handler
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subg_send_and_listen
</UL>

<P><STRONG><a name="[113]"></a>Kit_ReverseFourBytes</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, kit_utils.o(i.Kit_ReverseFourBytes))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_send_and_listen
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_pkt
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aps_cmd_loop
</UL>

<P><STRONG><a name="[10b]"></a>Kit_ReverseTwoBytes</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, kit_utils.o(i.Kit_ReverseTwoBytes))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_send_and_listen
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aps_cmd_loop
</UL>

<P><STRONG><a name="[b3]"></a>Led_Ctrl</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, led.o(i.Led_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Led_Ctrl &rArr; led_timer_handle &rArr; app_timer_start &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_timer_handle
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_multiple_control
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idc_SetType
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_data_set
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fct_req_loop
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idc_Init
</UL>

<P><STRONG><a name="[b1]"></a>Led_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, led.o(i.Led_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Led_Init &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_multiple_control
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idc_Init
</UL>

<P><STRONG><a name="[f1]"></a>Log_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ocp.o(i.Log_Init))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[b4]"></a>Motor_Ctrl</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, motor.o(i.Motor_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Motor_Ctrl &rArr; motor_timer_handle &rArr; motor_on &rArr; nrfx_pwm_init &rArr; configure_pins
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_timer_handle
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_off
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idc_SetType
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_data_set
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fct_req_loop
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_test_handle
</UL>

<P><STRONG><a name="[b0]"></a>Motor_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, motor.o(i.Motor_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Motor_Init &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idc_Init
</UL>

<P><STRONG><a name="[b]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_power.o(i.POWER_CLOCK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = POWER_CLOCK_IRQHandler &rArr; nrfx_clock_irq_handler &rArr; nrf_clock_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_irq_handler
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52810.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>PWM0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_pwm.o(i.PWM0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWM0_IRQHandler &rArr; irq_handler &rArr; nrf_pwm_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52810.o(RESET)
</UL>
<P><STRONG><a name="[bf]"></a>Pwr_MgmtIdle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ocp.o(i.Pwr_MgmtIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Pwr_MgmtIdle &rArr; nrf_pwr_mgmt_run
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_run
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Idle
</UL>

<P><STRONG><a name="[c1]"></a>Pwr_MgmtInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ocp.o(i.Pwr_MgmtInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Pwr_MgmtInit &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[f2]"></a>Pwr_ResetReason</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ocp.o(i.Pwr_ResetReason))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[1b]"></a>RTC1_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_timer.o(i.RTC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC1_IRQHandler &rArr; timer_timeouts_check
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52810.o(RESET)
</UL>
<P><STRONG><a name="[c4]"></a>Rf69_ClearFifo</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rf69.o(i.Rf69_ClearFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Rf69_ClearFifo &rArr; spi_write_reg &rArr; spi_select &rArr; nrf_drv_spi_init &rArr; nrfx_spim_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omnipod_tx
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minimed_tx
</UL>

<P><STRONG><a name="[c6]"></a>Rf69_DevParaCfg</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rf69.o(i.Rf69_DevParaCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Rf69_DevParaCfg &rArr; Rf69_SetMode &rArr; spi_read_reg &rArr; spi_select &rArr; nrf_drv_spi_init &rArr; nrfx_spim_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_SetMode
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subg_CfgRf
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subg_Init
</UL>

<P><STRONG><a name="[c8]"></a>Rf69_IsFifoEmpty</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rf69.o(i.Rf69_IsFifoEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Rf69_IsFifoEmpty &rArr; spi_read_reg &rArr; spi_select &rArr; nrf_drv_spi_init &rArr; nrfx_spim_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omnipod_tx
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omnipod_rx
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minimed_tx
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minimed_rx
</UL>

<P><STRONG><a name="[ca]"></a>Rf69_IsFifoFull</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rf69.o(i.Rf69_IsFifoFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Rf69_IsFifoFull &rArr; spi_read_reg &rArr; spi_select &rArr; nrf_drv_spi_init &rArr; nrfx_spim_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_fifo_not_full
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omnipod_tx
</UL>

<P><STRONG><a name="[cb]"></a>Rf69_IsFifoOverThreshold</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rf69.o(i.Rf69_IsFifoOverThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Rf69_IsFifoOverThreshold &rArr; spi_read_reg &rArr; spi_select &rArr; nrf_drv_spi_init &rArr; nrfx_spim_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omnipod_tx
</UL>

<P><STRONG><a name="[cc]"></a>Rf69_RcvByte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rf69.o(i.Rf69_RcvByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Rf69_RcvByte &rArr; spi_read_reg &rArr; spi_select &rArr; nrf_drv_spi_init &rArr; nrfx_spim_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omnipod_rx
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minimed_rx
</UL>

<P><STRONG><a name="[cd]"></a>Rf69_ReadRssi</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rf69.o(i.Rf69_ReadRssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Rf69_ReadRssi &rArr; spi_read_reg &rArr; spi_select &rArr; nrf_drv_spi_init &rArr; nrfx_spim_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_reg
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omnipod_rx
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minimed_rx
</UL>

<P><STRONG><a name="[ce]"></a>Rf69_SetFreq</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, rf69.o(i.Rf69_SetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Rf69_SetFreq &rArr; Rf69_SetMode &rArr; spi_read_reg &rArr; spi_select &rArr; nrf_drv_spi_init &rArr; nrfx_spim_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_SetMode
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subg_SetFreq
</UL>

<P><STRONG><a name="[c7]"></a>Rf69_SetMode</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, rf69.o(i.Rf69_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Rf69_SetMode &rArr; spi_read_reg &rArr; spi_select &rArr; nrf_drv_spi_init &rArr; nrfx_spim_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_reg
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subg_SendPkt
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_SetFreq
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_DevParaCfg
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_stop
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omnipod_tx
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omnipod_rx
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minimed_tx
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minimed_rx
</UL>

<P><STRONG><a name="[cf]"></a>Rf69_SetOokBw200khz</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rf69.o(i.Rf69_SetOokBw200khz))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Rf69_SetOokBw200khz &rArr; spi_write_reg &rArr; spi_select &rArr; nrf_drv_spi_init &rArr; nrfx_spim_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subg_SendPkt
</UL>

<P><STRONG><a name="[d0]"></a>Rf69_SetOokBw250khz</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rf69.o(i.Rf69_SetOokBw250khz))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Rf69_SetOokBw250khz &rArr; spi_write_reg &rArr; spi_select &rArr; nrf_drv_spi_init &rArr; nrfx_spim_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subg_SendPkt
</UL>

<P><STRONG><a name="[d1]"></a>Rf69_SetPayloadLen</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rf69.o(i.Rf69_SetPayloadLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Rf69_SetPayloadLen &rArr; spi_read_reg &rArr; spi_select &rArr; nrf_drv_spi_init &rArr; nrfx_spim_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_reg
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subg_SendPkt
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omnipod_rx
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minimed_rx
</UL>

<P><STRONG><a name="[d2]"></a>Rf69_SetPreambleSize</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rf69.o(i.Rf69_SetPreambleSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Rf69_SetPreambleSize &rArr; spi_write_reg &rArr; spi_select &rArr; nrf_drv_spi_init &rArr; nrfx_spim_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subg_SendPkt
</UL>

<P><STRONG><a name="[d3]"></a>Rf69_SetSyncOnOff</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, rf69.o(i.Rf69_SetSyncOnOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Rf69_SetSyncOnOff &rArr; spi_read_reg &rArr; spi_select &rArr; nrf_drv_spi_init &rArr; nrfx_spim_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_reg
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subg_SendPkt
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omnipod_rx
</UL>

<P><STRONG><a name="[d4]"></a>Rf69_SetUnlimitedLenPkt</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rf69.o(i.Rf69_SetUnlimitedLenPkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Rf69_SetUnlimitedLenPkt &rArr; spi_read_reg &rArr; spi_select &rArr; nrf_drv_spi_init &rArr; nrfx_spim_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_reg
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subg_SendPkt
</UL>

<P><STRONG><a name="[d5]"></a>Rf69_XmitBuf</STRONG> (Thumb, 58 bytes, Stack size 272 bytes, rf69.o(i.Rf69_XmitBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = Rf69_XmitBuf &rArr; spi_select &rArr; nrf_drv_spi_init &rArr; nrfx_spim_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_unselect
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_select
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minimed_tx
</UL>

<P><STRONG><a name="[d9]"></a>Rf69_XmitByte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rf69.o(i.Rf69_XmitByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Rf69_XmitByte &rArr; spi_write_reg &rArr; spi_select &rArr; nrf_drv_spi_init &rArr; nrfx_spim_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omnipod_tx
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minimed_tx
</UL>

<P><STRONG><a name="[da]"></a>Rtc_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ocp.o(i.Rtc_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Rtc_Init &rArr; app_timer_init &rArr; rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[11]"></a>SAADC_IRQHandler</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, nrfx_saadc.o(i.SAADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SAADC_IRQHandler &rArr; nrf_saadc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_clear
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_check
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_buffer_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52810.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>SPIM0_SPIS0_SPI0_IRQHandler</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, nrfx_spim.o(i.SPIM0_SPIS0_SPI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPIM0_SPIS0_SPI0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_check
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Address Reference Count : 2]<UL><LI> nrfx_spim.o(.constdata)
<LI> arm_startup_nrf52810.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SWI0_EGU0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_timer.o(i.SWI0_EGU0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SWI0_EGU0_IRQHandler &rArr; timer_list_handler &rArr; list_insertions_handler &rArr; timer_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52810.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SWI2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_sdh.o(i.SWI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SWI2_IRQHandler &rArr; nrf_sdh_evts_poll &rArr; nrf_section_iter_next &rArr; nrf_section_iter_item_set
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52810.o(RESET)
</UL>
<P><STRONG><a name="[e4]"></a>Subg_CfgRf</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, app_subg.o(i.Subg_CfgRf))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Subg_CfgRf &rArr; Rf69_DevParaCfg &rArr; Rf69_SetMode &rArr; spi_read_reg &rArr; spi_select &rArr; nrf_drv_spi_init &rArr; nrfx_spim_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_DevParaCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_update_reg
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aps_cmd_loop
</UL>

<P><STRONG><a name="[109]"></a>Subg_ClrIntFlg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_subg.o(i.Subg_ClrIntFlg))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aps_cmd_loop
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fct_req_loop
</UL>

<P><STRONG><a name="[10c]"></a>Subg_GetMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_subg.o(i.Subg_GetMode))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_update_reg
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_send_and_listen
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aps_cmd_loop
</UL>

<P><STRONG><a name="[e5]"></a>Subg_GetPkt</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, app_subg.o(i.Subg_GetPkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Subg_GetPkt &rArr; omnipod_rx &rArr; Rf69_SetSyncOnOff &rArr; spi_read_reg &rArr; spi_select &rArr; nrf_drv_spi_init &rArr; nrfx_spim_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_stop
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omnipod_rx
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minimed_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_send_and_listen
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_pkt
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subg_send_and_listen
</UL>

<P><STRONG><a name="[162]"></a>Subg_GetRssi</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_subg.o(i.Subg_GetRssi))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_send_and_listen
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_pkt
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subg_send_and_listen
</UL>

<P><STRONG><a name="[114]"></a>Subg_GetRxPktCnt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_subg.o(i.Subg_GetRxPktCnt))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_send_and_listen
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_pkt
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aps_cmd_loop
</UL>

<P><STRONG><a name="[115]"></a>Subg_GetTxPktCnt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_subg.o(i.Subg_GetTxPktCnt))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aps_cmd_loop
</UL>

<P><STRONG><a name="[e9]"></a>Subg_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, app_subg.o(i.Subg_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Subg_Init &rArr; Rf69_DevParaCfg &rArr; Rf69_SetMode &rArr; spi_read_reg &rArr; spi_select &rArr; nrf_drv_spi_init &rArr; nrfx_spim_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_DevParaCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ea]"></a>Subg_SendPkt</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, app_subg.o(i.Subg_SendPkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = Subg_SendPkt &rArr; omnipod_tx &rArr; Rf69_SetMode &rArr; spi_read_reg &rArr; spi_select &rArr; nrf_drv_spi_init &rArr; nrfx_spim_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kit_DelayMs
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_GetState
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_feed
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_SetUnlimitedLenPkt
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_SetSyncOnOff
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_SetPreambleSize
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_SetPayloadLen
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_SetOokBw250khz
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_SetOokBw200khz
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_SetMode
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_stop
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omnipod_tx
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minimed_tx
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_send_and_listen
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aps_cmd_loop
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subg_send_and_listen
</UL>

<P><STRONG><a name="[ee]"></a>Subg_SetFreq</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_subg.o(i.Subg_SetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Subg_SetFreq &rArr; Rf69_SetFreq &rArr; Rf69_SetMode &rArr; spi_read_reg &rArr; spi_select &rArr; nrf_drv_spi_init &rArr; nrfx_spim_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_SetFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_set_freq
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subg_send_and_listen
</UL>

<P><STRONG><a name="[7c]"></a>Subg_SetIntFlg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_subg.o(i.Subg_SetIntFlg))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fct_PutReq
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aps_PutCmd
</UL>

<P><STRONG><a name="[160]"></a>Subg_SetMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_subg.o(i.Subg_SetMode))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_update_reg
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_set_freq
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subg_send_and_listen
</UL>

<P><STRONG><a name="[165]"></a>Subg_SetPktLen</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_subg.o(i.Subg_SetPktLen))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_update_reg
</UL>

<P><STRONG><a name="[112]"></a>Subg_SetPreamble</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_subg.o(i.Subg_SetPreamble))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_set_preamble
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aps_cmd_loop
</UL>

<P><STRONG><a name="[ef]"></a>Sys_Idle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_sys.o(i.Sys_Idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sys_Idle &rArr; Pwr_MgmtIdle &rArr; nrf_pwr_mgmt_run
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwr_MgmtIdle
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f0]"></a>Sys_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, app_sys.o(i.Sys_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Sys_Init &rArr; Timer_Init &rArr; nrfx_timer_extended_compare &rArr; nrfx_timer_compare &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wdt_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwr_ResetReason
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwr_MgmtInit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dcdc_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[27]"></a>SystemInit</STRONG> (Thumb, 392 bytes, Stack size 12 bytes, system_nrf52810.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52810.o(.text)
</UL>
<P><STRONG><a name="[13]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nrfx_timer.o(i.TIMER1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIMER1_IRQHandler &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_event_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52810.o(RESET)
</UL>
<P><STRONG><a name="[17a]"></a>Timer_GetCnt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ocp.o(i.Timer_GetCnt))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omnipod_tx
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omnipod_rx
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minimed_rx
</UL>

<P><STRONG><a name="[f5]"></a>Timer_Init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ocp.o(i.Timer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Timer_Init &rArr; nrfx_timer_extended_compare &rArr; nrfx_timer_compare &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_extended_compare
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_enable
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[d]"></a>UARTE0_UART0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_prs.o(i.UARTE0_UART0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52810.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>WDT_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nrfx_wdt.o(i.WDT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WDT_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52810.o(RESET)
</UL>
<P><STRONG><a name="[f4]"></a>Wdt_Init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ocp.o(i.Wdt_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Wdt_Init &rArr; nrfx_wdt_channel_alloc &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_wdt_init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_wdt_enable
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_wdt_channel_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[1d6]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1d7]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1d8]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[40]"></a>app_error_fault_handler</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, app_error_weak.o(i.app_error_fault_handler))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh.o(i.nrf_sdh_enable_request)
</UL>
<P><STRONG><a name="[83]"></a>app_error_handler_bare</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, app_error.o(i.app_error_handler_bare))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Batt_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batt_detect
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_evt
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_qwr_error_handler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_error_handler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wdt_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwr_MgmtInit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idc_Init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_on
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_soc_evts_poll
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_evts_poll
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevices_evt_irq_enable
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_evt_irq_disable
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_on
</UL>

<P><STRONG><a name="[77]"></a>app_timer_create</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_timer.o(i.app_timer_create))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aps_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Batt_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ips_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fct_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idc_Init
</UL>

<P><STRONG><a name="[db]"></a>app_timer_init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, app_timer.o(i.app_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_timer_init &rArr; rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Init
</UL>

<P><STRONG><a name="[7f]"></a>app_timer_start</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, app_timer.o(i.app_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = app_timer_start &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Batt_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ips_init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fct_StartLoop
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_StartLoop
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_SetAdvName
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aps_StartLoop
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_data_set
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idc_Init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_timer_handle
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_timer_handle
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_timer_handle
</UL>

<P><STRONG><a name="[81]"></a>app_timer_stop</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_timer.o(i.app_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fct_StopLoop
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_StopLoop
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aps_StopLoop
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Ctrl
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Ctrl
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Ctrl
</UL>

<P><STRONG><a name="[104]"></a>app_util_critical_region_enter</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, app_util_platform.o(i.app_util_critical_region_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_wdt_channel_alloc
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
</UL>

<P><STRONG><a name="[106]"></a>app_util_critical_region_exit</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, app_util_platform.o(i.app_util_critical_region_exit))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_wdt_channel_alloc
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
</UL>

<P><STRONG><a name="[123]"></a>blcm_link_ctx_get</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ble_link_ctx_manager.o(i.blcm_link_ctx_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = blcm_link_ctx_get &rArr; ble_conn_state_conn_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_data_send
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ips_response_cnt_notify
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ips_timer_tick_handle
</UL>

<P><STRONG><a name="[125]"></a>ble_advdata_encode</STRONG> (Thumb, 386 bytes, Stack size 40 bytes, ble_advdata.o(i.ble_advdata_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_encode
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_device_addr_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
</UL>

<P><STRONG><a name="[12d]"></a>ble_advdata_parse</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ble_advdata.o(i.ble_advdata_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_search
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set
</UL>

<P><STRONG><a name="[12e]"></a>ble_advdata_search</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ble_advdata.o(i.ble_advdata_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_advdata_search
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_parse
</UL>

<P><STRONG><a name="[fe]"></a>ble_advertising_conn_cfg_tag_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_advertising.o(i.ble_advertising_conn_cfg_tag_set))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
</UL>

<P><STRONG><a name="[fd]"></a>ble_advertising_init</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, ble_advertising.o(i.ble_advertising_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ble_advertising_init &rArr; ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
</UL>

<P><STRONG><a name="[4f]"></a>ble_advertising_on_ble_evt</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, ble_advertising.o(i.ble_advertising_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ble_advertising_on_ble_evt &rArr; ble_advertising_start &rArr; flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[5a]"></a>ble_advertising_on_sys_evt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_advertising.o(i.ble_advertising_on_sys_evt))
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(sdh_soc_observers1)
</UL>
<P><STRONG><a name="[ff]"></a>ble_advertising_start</STRONG> (Thumb, 514 bytes, Stack size 40 bytes, ble_advertising.o(i.ble_advertising_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ble_advertising_start &rArr; flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;use_whitelist
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_is_valid
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
</UL>

<P><STRONG><a name="[122]"></a>ble_bas_battery_level_update</STRONG> (Thumb, 192 bytes, Stack size 112 bytes, ble_bas.o(i.ble_bas_battery_level_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ble_bas_battery_level_update &rArr; ble_conn_state_conn_handles &rArr; conn_handle_list_get
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_notification_send
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_status
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_handles
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_level_update_handle
</UL>

<P><STRONG><a name="[135]"></a>ble_bas_init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ble_bas.o(i.ble_bas_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ble_bas_init &rArr; battery_level_char_add &rArr; characteristic_add
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_level_char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[54]"></a>ble_bas_on_ble_evt</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ble_bas.o(i.ble_bas_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_bas_on_ble_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(sdh_ble_observers2)
</UL>
<P><STRONG><a name="[90]"></a>ble_conn_params_init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ble_conn_params.o(i.ble_conn_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_conn_params_init
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Init
</UL>

<P><STRONG><a name="[133]"></a>ble_conn_state_conn_handles</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_conn_state.o(i.ble_conn_state_conn_handles))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_conn_state_conn_handles &rArr; conn_handle_list_get
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_handle_list_get
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_battery_level_update
</UL>

<P><STRONG><a name="[124]"></a>ble_conn_state_conn_idx</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ble_conn_state.o(i.ble_conn_state_conn_idx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_conn_state_conn_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blcm_link_ctx_get
</UL>

<P><STRONG><a name="[134]"></a>ble_conn_state_status</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ble_conn_state.o(i.ble_conn_state_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_conn_state_status
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_battery_level_update
</UL>

<P><STRONG><a name="[138]"></a>ble_conn_state_valid</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ble_conn_state.o(i.ble_conn_state_valid))
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_status
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_idx
</UL>

<P><STRONG><a name="[86]"></a>ble_dfu_buttonless_async_svci_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ble_dfu_unbonded.o(i.ble_dfu_buttonless_async_svci_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_dfu_buttonless_async_svci_init
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_dfu_svci_vector_table_unset
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_dfu_svci_vector_table_set
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Init
</UL>

<P><STRONG><a name="[141]"></a>ble_dfu_buttonless_backend_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_dfu_unbonded.o(i.ble_dfu_buttonless_backend_init))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_init
</UL>

<P><STRONG><a name="[13c]"></a>ble_dfu_buttonless_bootloader_start_finalize</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ble_dfu.o(i.ble_dfu_buttonless_bootloader_start_finalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_dfu_buttonless_bootloader_start_finalize &rArr; nrf_pwr_mgmt_shutdown &rArr; shutdown_process &rArr; nrf_section_iter_next &rArr; nrf_section_iter_item_set
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_bootloader_start_prepare
</UL>

<P><STRONG><a name="[13e]"></a>ble_dfu_buttonless_bootloader_start_prepare</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_dfu_unbonded.o(i.ble_dfu_buttonless_bootloader_start_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ble_dfu_buttonless_bootloader_start_prepare &rArr; ble_dfu_buttonless_bootloader_start_finalize &rArr; nrf_pwr_mgmt_shutdown &rArr; shutdown_process &rArr; nrf_section_iter_next &rArr; nrf_section_iter_item_set
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_bootloader_start_finalize
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_on_ble_evt
</UL>

<P><STRONG><a name="[13f]"></a>ble_dfu_buttonless_char_add</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, ble_dfu_unbonded.o(i.ble_dfu_buttonless_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ble_dfu_buttonless_char_add &rArr; characteristic_add
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characteristic_add
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_init
</UL>

<P><STRONG><a name="[140]"></a>ble_dfu_buttonless_init</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, ble_dfu.o(i.ble_dfu_buttonless_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ble_dfu_buttonless_init &rArr; ble_dfu_buttonless_char_add &rArr; characteristic_add
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_char_add
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_backend_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[55]"></a>ble_dfu_buttonless_on_ble_evt</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, ble_dfu.o(i.ble_dfu_buttonless_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ble_dfu_buttonless_on_ble_evt &rArr; on_rw_authorize_req &rArr; ble_dfu_buttonless_on_ctrl_pt_write &rArr; ble_dfu_buttonless_resp_send
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_bootloader_start_prepare
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rw_authorize_req
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_indication_enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_dfu.o(sdh_ble_observers2)
</UL>
<P><STRONG><a name="[144]"></a>ble_dfu_buttonless_on_ctrl_pt_write</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, ble_dfu_unbonded.o(i.ble_dfu_buttonless_on_ctrl_pt_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_dfu_buttonless_on_ctrl_pt_write &rArr; ble_dfu_buttonless_resp_send
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_resp_send
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rw_authorize_req
</UL>

<P><STRONG><a name="[5c]"></a>ble_dfu_buttonless_on_sys_evt</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ble_dfu_unbonded.o(i.ble_dfu_buttonless_on_sys_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_dfu_buttonless_on_sys_evt &rArr; ble_dfu_buttonless_resp_send
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_resp_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_dfu_unbonded.o(sdh_soc_observers1)
</UL>
<P><STRONG><a name="[145]"></a>ble_dfu_buttonless_resp_send</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ble_dfu.o(i.ble_dfu_buttonless_resp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_dfu_buttonless_resp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_on_sys_evt
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_on_ctrl_pt_write
</UL>

<P><STRONG><a name="[94]"></a>ble_ips_data_send</STRONG> (Thumb, 88 bytes, Stack size 184 bytes, ble_ips.o(i.ble_ips_data_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ble_ips_data_send
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kit_PrintBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_IpsNotifyRespCntAndSendData
</UL>

<P><STRONG><a name="[14f]"></a>ble_ips_init</STRONG> (Thumb, 902 bytes, Stack size 304 bytes, ble_ips.o(i.ble_ips_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = ble_ips_init &rArr; user_128bit_uuid_characteristic_add
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_128bit_uuid_characteristic_add
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[52]"></a>ble_ips_on_ble_evt</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ble_ips.o(i.ble_ips_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_ips_on_ble_evt &rArr; on_write &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(sdh_ble_observers2)
</UL>
<P><STRONG><a name="[95]"></a>ble_ips_response_cnt_notify</STRONG> (Thumb, 122 bytes, Stack size 56 bytes, ble_ips.o(i.ble_ips_response_cnt_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ble_ips_response_cnt_notify &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blcm_link_ctx_get
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_IpsNotifyRespCntAndSendData
</UL>

<P><STRONG><a name="[97]"></a>ble_nus_data_send</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, ble_nus.o(i.ble_nus_data_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ble_nus_data_send &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blcm_link_ctx_get
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_NusSendData
</UL>

<P><STRONG><a name="[154]"></a>ble_nus_init</STRONG> (Thumb, 206 bytes, Stack size 72 bytes, ble_nus.o(i.ble_nus_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ble_nus_init &rArr; characteristic_add
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characteristic_add
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[51]"></a>ble_nus_on_ble_evt</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, ble_nus.o(i.ble_nus_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ble_nus_on_ble_evt &rArr; on_connect &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blcm_link_ctx_get
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(sdh_ble_observers2)
</UL>
<P><STRONG><a name="[143]"></a>ble_srv_is_indication_enabled</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_srv_common.o(i.ble_srv_is_indication_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_on_ble_evt
</UL>

<P><STRONG><a name="[136]"></a>ble_srv_is_notification_enabled</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_srv_common.o(i.ble_srv_is_notification_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_on_ble_evt
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
</UL>

<P><STRONG><a name="[11f]"></a>ble_srv_report_ref_encode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_srv_common.o(i.ble_srv_report_ref_encode))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_level_char_add
</UL>

<P><STRONG><a name="[11e]"></a>characteristic_add</STRONG> (Thumb, 400 bytes, Stack size 96 bytes, ble_srv_common.o(i.characteristic_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = characteristic_add
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_security_req
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_level_char_add
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_char_add
</UL>

<P><STRONG><a name="[111]"></a>cmd_set_preamble</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app_aps.o(i.cmd_set_preamble))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = cmd_set_preamble &rArr; send_byte_to_ble &rArr; Ble_IpsNotifyRespCntAndSendData &rArr; ble_ips_data_send
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subg_SetPreamble
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_byte_to_ble
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aps_cmd_loop
</UL>

<P><STRONG><a name="[137]"></a>conn_handle_list_get</STRONG> (Thumb, 62 bytes, Stack size 72 bytes, ble_conn_state.o(i.conn_handle_list_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = conn_handle_list_get
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_handles
</UL>

<P><STRONG><a name="[168]"></a>decode_4b6b</STRONG> (Thumb, 180 bytes, Stack size 28 bytes, 4b6b.o(i.decode_4b6b))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = decode_4b6b
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encrypt_decode
</UL>

<P><STRONG><a name="[169]"></a>decode_manchester</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, manchester.o(i.decode_manchester))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = decode_manchester
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encrypt_decode
</UL>

<P><STRONG><a name="[120]"></a>descriptor_add</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, ble_srv_common.o(i.descriptor_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = descriptor_add
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_security_req
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_level_char_add
</UL>

<P><STRONG><a name="[16b]"></a>encode_4b6b</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, 4b6b.o(i.encode_4b6b))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = encode_4b6b
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encrypt_encode
</UL>

<P><STRONG><a name="[16a]"></a>encode_manchester</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, manchester.o(i.encode_manchester))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = encode_manchester
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encrypt_encode
</UL>

<P><STRONG><a name="[164]"></a>encrypt_decode</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, app_aps.o(i.encrypt_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = encrypt_decode &rArr; decode_4b6b
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_manchester
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_4b6b
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_send_and_listen
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_pkt
</UL>

<P><STRONG><a name="[26]"></a>main</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = main &rArr; Ble_Init &rArr; services_init &rArr; ble_ips_init &rArr; user_128bit_uuid_characteristic_add
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aps_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Batt_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Idle
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fct_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subg_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idc_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[17d]"></a>nrf_atfifo_clear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf_atfifo.o(i.nrf_atfifo_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atfifo_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_space_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uninit
</UL>

<P><STRONG><a name="[174]"></a>nrf_atfifo_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nrf_atfifo.o(i.nrf_atfifo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atfifo_init
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[16c]"></a>nrf_atfifo_item_alloc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nrf_atfifo.o(i.nrf_atfifo_item_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_req
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
</UL>

<P><STRONG><a name="[180]"></a>nrf_atfifo_item_free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrf_atfifo.o(i.nrf_atfifo_item_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atfifo_item_free
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_free
</UL>

<P><STRONG><a name="[181]"></a>nrf_atfifo_item_get</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nrf_atfifo.o(i.nrf_atfifo_item_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_atfifo_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_req
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[16d]"></a>nrf_atfifo_item_put</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrf_atfifo.o(i.nrf_atfifo_item_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atfifo_item_put
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
</UL>

<P><STRONG><a name="[14c]"></a>nrf_atflags_clear</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_atflags.o(i.nrf_atflags_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atflags_clear &rArr; nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_and
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[139]"></a>nrf_atflags_get</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_atflags.o(i.nrf_atflags_get))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_handle_list_get
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_status
</UL>

<P><STRONG><a name="[14d]"></a>nrf_atflags_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_atflags.o(i.nrf_atflags_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atflags_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_or
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[172]"></a>nrf_atomic_flag_set_fetch</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_atomic.o(i.nrf_atomic_flag_set_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_flag_set_fetch &rArr; nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_or
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[14b]"></a>nrf_atomic_u32_and</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_u32_and))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_and
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_clear
</UL>

<P><STRONG><a name="[184]"></a>nrf_atomic_u32_fetch_or</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_u32_fetch_or))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_orr
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set_fetch
</UL>

<P><STRONG><a name="[187]"></a>nrf_atomic_u32_fetch_store</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_u32_fetch_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_fetch_store
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_mov
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_shutdown
</UL>

<P><STRONG><a name="[183]"></a>nrf_atomic_u32_or</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_u32_or))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_orr
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_set
</UL>

<P><STRONG><a name="[8e]"></a>nrf_ble_gatt_att_mtu_periph_set</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_ble_gatt.o(i.nrf_ble_gatt_att_mtu_periph_set))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Init
</UL>

<P><STRONG><a name="[8d]"></a>nrf_ble_gatt_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nrf_ble_gatt.o(i.nrf_ble_gatt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_ble_gatt_init
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_init
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Init
</UL>

<P><STRONG><a name="[4e]"></a>nrf_ble_gatt_on_ble_evt</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, nrf_ble_gatt.o(i.nrf_ble_gatt_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_ble_gatt_on_ble_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[146]"></a>nrf_ble_qwr_conn_handle_assign</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_ble_qwr.o(i.nrf_ble_qwr_conn_handle_assign))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[1b9]"></a>nrf_ble_qwr_init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, nrf_ble_qwr.o(i.nrf_ble_qwr_init))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[53]"></a>nrf_ble_qwr_on_ble_evt</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, nrf_ble_qwr.o(i.nrf_ble_qwr_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_ble_qwr_on_ble_evt &rArr; user_mem_reply
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mem_reply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(sdh_ble_observers2)
</UL>
<P><STRONG><a name="[13a]"></a>nrf_dfu_svci_vector_table_set</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrf_dfu_svci.o(i.nrf_dfu_svci_vector_table_set))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_async_svci_init
</UL>

<P><STRONG><a name="[13b]"></a>nrf_dfu_svci_vector_table_unset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_dfu_svci.o(i.nrf_dfu_svci_vector_table_unset))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_async_svci_init
</UL>

<P><STRONG><a name="[18b]"></a>nrf_drv_clock_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.nrf_drv_clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_clock_init
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_enable
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
</UL>

<P><STRONG><a name="[18e]"></a>nrf_drv_clock_lfclk_release</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.nrf_drv_clock_lfclk_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_drv_clock_lfclk_release &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_lfclk_stop
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
</UL>

<P><STRONG><a name="[190]"></a>nrf_drv_spi_init</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, nrf_drv_spi.o(i.nrf_drv_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nrf_drv_spi_init &rArr; nrfx_spim_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_select
</UL>

<P><STRONG><a name="[ac]"></a>nrf_fstorage_erase</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, nrf_fstorage.o(i.nrf_fstorage_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_fstorage_erase
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_is_within_bounds
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
</UL>

<P><STRONG><a name="[ab]"></a>nrf_fstorage_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_fstorage.o(i.nrf_fstorage_init))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Init
</UL>

<P><STRONG><a name="[1c0]"></a>nrf_fstorage_is_busy</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, nrf_fstorage.o(i.nrf_fstorage_is_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_fstorage_is_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_flash_ready
</UL>

<P><STRONG><a name="[57]"></a>nrf_fstorage_sdh_req_handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.nrf_fstorage_sdh_req_handler))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(sdh_req_observers0)
</UL>
<P><STRONG><a name="[60]"></a>nrf_fstorage_sdh_state_handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.nrf_fstorage_sdh_state_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nrf_fstorage_sdh_state_handler &rArr; queue_process &rArr; nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(sdh_state_observers0)
</UL>
<P><STRONG><a name="[59]"></a>nrf_fstorage_sys_evt_handler</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, nrf_fstorage_sd.o(i.nrf_fstorage_sys_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + In Cycle
<LI>Call Chain = nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_request_continue
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_free
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(sdh_soc_observers0)
</UL>
<P><STRONG><a name="[ae]"></a>nrf_fstorage_write</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, nrf_fstorage.o(i.nrf_fstorage_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_is_within_bounds
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_is_aligned32
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
</UL>

<P><STRONG><a name="[c2]"></a>nrf_pwr_mgmt_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrf_pwr_mgmt.o(i.nrf_pwr_mgmt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_pwr_mgmt_init
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwr_MgmtInit
</UL>

<P><STRONG><a name="[c0]"></a>nrf_pwr_mgmt_run</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrf_pwr_mgmt.o(i.nrf_pwr_mgmt_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_pwr_mgmt_run
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwr_MgmtIdle
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_flash_ready
</UL>

<P><STRONG><a name="[13d]"></a>nrf_pwr_mgmt_shutdown</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, nrf_pwr_mgmt.o(i.nrf_pwr_mgmt_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_pwr_mgmt_shutdown &rArr; shutdown_process &rArr; nrf_section_iter_next &rArr; nrf_section_iter_item_set
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_store
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown_process
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_bootloader_start_finalize
</UL>

<P><STRONG><a name="[19f]"></a>nrf_sdh_ble_app_ram_start_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_sdh_ble.o(i.nrf_sdh_ble_app_ram_start_get))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_default_cfg_set
</UL>

<P><STRONG><a name="[88]"></a>nrf_sdh_ble_default_cfg_set</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, nrf_sdh_ble.o(i.nrf_sdh_ble_default_cfg_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_sdh_ble_default_cfg_set
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_app_ram_start_get
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Init
</UL>

<P><STRONG><a name="[89]"></a>nrf_sdh_ble_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_sdh_ble.o(i.nrf_sdh_ble_enable))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Init
</UL>

<P><STRONG><a name="[1a1]"></a>nrf_sdh_disable_request</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, nrf_sdh.o(i.nrf_sdh_disable_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_sdh_disable_request &rArr; sdh_state_observer_notify &rArr; nrf_section_iter_next &rArr; nrf_section_iter_item_set
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_evt_irq_disable
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_request_continue
</UL>

<P><STRONG><a name="[87]"></a>nrf_sdh_enable_request</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, nrf_sdh.o(i.nrf_sdh_enable_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_sdh_enable_request &rArr; sdh_state_observer_notify &rArr; nrf_section_iter_next &rArr; nrf_section_iter_item_set
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevices_evt_irq_enable
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_request_continue
</UL>

<P><STRONG><a name="[e3]"></a>nrf_sdh_evts_poll</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, nrf_sdh.o(i.nrf_sdh_evts_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_sdh_evts_poll &rArr; nrf_section_iter_next &rArr; nrf_section_iter_item_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_IRQHandler
</UL>

<P><STRONG><a name="[173]"></a>nrf_sdh_is_enabled</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_sdh.o(i.nrf_sdh_is_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_run
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown_process
</UL>

<P><STRONG><a name="[196]"></a>nrf_sdh_request_continue</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_sdh.o(i.nrf_sdh_request_continue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_sdh_request_continue &rArr; nrf_sdh_enable_request &rArr; sdh_state_observer_notify &rArr; nrf_section_iter_next &rArr; nrf_section_iter_item_set
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
</UL>

<P><STRONG><a name="[19d]"></a>nrf_section_iter_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_section_iter.o(i.nrf_section_iter_init))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_soc_evts_poll
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_evts_poll
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
</UL>

<P><STRONG><a name="[1a0]"></a>nrf_section_iter_next</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nrf_section_iter.o(i.nrf_section_iter_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_section_iter_next &rArr; nrf_section_iter_item_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_item_set
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown_process
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_soc_evts_poll
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_evts_poll
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
</UL>

<P><STRONG><a name="[18d]"></a>nrfx_clock_enable</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrfx_clock_enable))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
</UL>

<P><STRONG><a name="[18c]"></a>nrfx_clock_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrfx_clock_init))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>

<P><STRONG><a name="[bd]"></a>nrfx_clock_irq_handler</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, nrfx_clock.o(i.nrfx_clock_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrfx_clock_irq_handler &rArr; nrf_clock_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_clear
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[18f]"></a>nrfx_clock_lfclk_stop</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrfx_clock_lfclk_stop))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
</UL>

<P><STRONG><a name="[bc]"></a>nrfx_power_irq_handler</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, nrfx_power.o(i.nrfx_power_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrfx_power_irq_handler &rArr; nrf_power_event_get_and_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_power_event_get_and_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[1aa]"></a>nrfx_prs_acquire</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, nrfx_prs.o(i.nrfx_prs_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrfx_prs_acquire &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prs_box_get
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_init
</UL>

<P><STRONG><a name="[1ac]"></a>nrfx_prs_release</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrfx_prs.o(i.nrfx_prs_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrfx_prs_release
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prs_box_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_uninit
</UL>

<P><STRONG><a name="[15a]"></a>nrfx_pwm_init</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, nrfx_pwm.o(i.nrfx_pwm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = nrfx_pwm_init &rArr; configure_pins
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwm_event_clear
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_pins
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_on
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_on
</UL>

<P><STRONG><a name="[1ae]"></a>nrfx_pwm_is_stopped</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nrfx_pwm.o(i.nrfx_pwm_is_stopped))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrfx_pwm_is_stopped
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwm_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_pwm_stop
</UL>

<P><STRONG><a name="[15b]"></a>nrfx_pwm_simple_playback</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, nrfx_pwm.o(i.nrfx_pwm_simple_playback))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrfx_pwm_simple_playback &rArr; start_playback &rArr; nrf_pwm_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_playback
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwm_sequence_set
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_on
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_on
</UL>

<P><STRONG><a name="[157]"></a>nrfx_pwm_stop</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, nrfx_pwm.o(i.nrfx_pwm_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrfx_pwm_stop &rArr; nrfx_pwm_is_stopped
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_pwm_is_stopped
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_off
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_off
</UL>

<P><STRONG><a name="[158]"></a>nrfx_pwm_uninit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, nrfx_pwm.o(i.nrfx_pwm_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrfx_pwm_uninit
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_off
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_off
</UL>

<P><STRONG><a name="[118]"></a>nrfx_saadc_channel_init</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, nrfx_saadc.o(i.nrfx_saadc_channel_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrfx_saadc_channel_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_channel_input_set
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batt_detect
</UL>

<P><STRONG><a name="[1b2]"></a>nrfx_saadc_channel_uninit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, nrfx_saadc.o(i.nrfx_saadc_channel_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrfx_saadc_channel_uninit &rArr; nrfx_saadc_limits_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_limits_set
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_channel_input_set
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_uninit
</UL>

<P><STRONG><a name="[117]"></a>nrfx_saadc_init</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, nrfx_saadc.o(i.nrfx_saadc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrfx_saadc_init &rArr; nrf_saadc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batt_detect
</UL>

<P><STRONG><a name="[1b3]"></a>nrfx_saadc_limits_set</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, nrfx_saadc.o(i.nrfx_saadc_limits_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrfx_saadc_limits_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_limit_int_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_channel_uninit
</UL>

<P><STRONG><a name="[119]"></a>nrfx_saadc_sample_convert</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, nrfx_saadc.o(i.nrfx_saadc_sample_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrfx_saadc_sample_convert &rArr; nrf_saadc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_clear
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_check
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_channel_input_set
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_buffer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batt_detect
</UL>

<P><STRONG><a name="[11a]"></a>nrfx_saadc_uninit</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, nrfx_saadc.o(i.nrfx_saadc_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrfx_saadc_uninit &rArr; nrfx_saadc_channel_uninit &rArr; nrfx_saadc_limits_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_channel_uninit
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batt_detect
</UL>

<P><STRONG><a name="[191]"></a>nrfx_spim_init</STRONG> (Thumb, 362 bytes, Stack size 40 bytes, nrfx_spim.o(i.nrfx_spim_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nrfx_spim_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
</UL>

<P><STRONG><a name="[1b6]"></a>nrfx_spim_uninit</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, nrfx_spim.o(i.nrfx_spim_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrfx_spim_uninit &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_check
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_release
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_unselect
</UL>

<P><STRONG><a name="[192]"></a>nrfx_spim_xfer</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, nrfx_spim.o(i.nrfx_spim_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrfx_spim_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
</UL>

<P><STRONG><a name="[1b8]"></a>nrfx_timer_compare</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, nrfx_timer.o(i.nrfx_timer_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrfx_timer_compare &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_extended_compare
</UL>

<P><STRONG><a name="[f9]"></a>nrfx_timer_enable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrfx_timer.o(i.nrfx_timer_enable))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
</UL>

<P><STRONG><a name="[f8]"></a>nrfx_timer_extended_compare</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nrfx_timer.o(i.nrfx_timer_extended_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrfx_timer_extended_compare &rArr; nrfx_timer_compare &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
</UL>

<P><STRONG><a name="[f7]"></a>nrfx_timer_init</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, nrfx_timer.o(i.nrfx_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrfx_timer_init &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
</UL>

<P><STRONG><a name="[fb]"></a>nrfx_wdt_channel_alloc</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, nrfx_wdt.o(i.nrfx_wdt_channel_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrfx_wdt_channel_alloc &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wdt_Init
</UL>

<P><STRONG><a name="[1bd]"></a>nrfx_wdt_channel_feed</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_wdt.o(i.nrfx_wdt_channel_feed))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_feed
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timr_evt_handle
</UL>

<P><STRONG><a name="[fc]"></a>nrfx_wdt_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrfx_wdt.o(i.nrfx_wdt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wdt_Init
</UL>

<P><STRONG><a name="[fa]"></a>nrfx_wdt_init</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, nrfx_wdt.o(i.nrfx_wdt_init))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wdt_Init
</UL>

<P><STRONG><a name="[eb]"></a>wdt_feed</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ocp.o(i.wdt_feed))
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_wdt_channel_feed
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subg_SendPkt
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[91]"></a>advertising_init</STRONG> (Thumb, 90 bytes, Stack size 176 bytes, app_ble.o(i.advertising_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = advertising_init &rArr; ble_advertising_init &rArr; ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_conn_cfg_tag_set
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[92]"></a>advertising_start</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_ble.o(i.advertising_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = advertising_start &rArr; ble_advertising_start &rArr; flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[2e]"></a>battery_level_update_handle</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, app_ble.o(i.battery_level_update_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = battery_level_update_handle &rArr; ble_bas_battery_level_update &rArr; ble_conn_state_conn_handles &rArr; conn_handle_list_get
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_battery_level_update
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Batt_GetLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(i.Ble_Init)
</UL>
<P><STRONG><a name="[43]"></a>ble_dfu_evt_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_ble.o(i.ble_dfu_evt_handler))
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(i.services_init)
</UL>
<P><STRONG><a name="[56]"></a>ble_evt_handler</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, app_ble.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ble_evt_handler &rArr; advertising_init &rArr; ble_advertising_init &rArr; ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_qwr_conn_handle_assign
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idc_SetType
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fct_StopLoop
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_StopLoop
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_StartLoop
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_GetAdvNameLen
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_GetAdvName
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aps_StopLoop
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aps_StartLoop
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_level_update_handle
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(sdh_ble_observers3)
</UL>
<P><STRONG><a name="[2d]"></a>conn_params_error_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_ble.o(i.conn_params_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = conn_params_error_handler &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(i.Ble_Init)
</UL>
<P><STRONG><a name="[2b]"></a>gatt_evt_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_ble.o(i.gatt_evt_handler))
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(i.Ble_Init)
</UL>
<P><STRONG><a name="[42]"></a>ips_data_handler</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, app_ble.o(i.ips_data_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ips_data_handler &rArr; Aps_PutCmd &rArr; cmd_update_reg &rArr; send_byte_to_ble &rArr; Ble_IpsNotifyRespCntAndSendData &rArr; ble_ips_data_send
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kit_PrintBytes
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_SetAdvName
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aps_PutCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(i.services_init)
</UL>
<P><STRONG><a name="[41]"></a>nrf_qwr_error_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_ble.o(i.nrf_qwr_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_qwr_error_handler &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(i.services_init)
</UL>
<P><STRONG><a name="[44]"></a>nus_data_handler</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, app_ble.o(i.nus_data_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = nus_data_handler &rArr; Fct_StopLoop &rArr; Idc_SetType &rArr; Motor_Ctrl &rArr; motor_timer_handle &rArr; motor_on &rArr; nrfx_pwm_init &rArr; configure_pins
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fct_StopLoop
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fct_StartLoop
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fct_PutReq
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_PutReq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(i.services_init)
</UL>
<P><STRONG><a name="[39]"></a>on_adv_evt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_ble.o(i.on_adv_evt))
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(i.advertising_init)
</UL>
<P><STRONG><a name="[2c]"></a>on_conn_params_evt</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, app_ble.o(i.on_conn_params_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = on_conn_params_evt &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(i.Ble_Init)
</UL>
<P><STRONG><a name="[8f]"></a>services_init</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, app_ble.o(i.services_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = services_init &rArr; ble_ips_init &rArr; user_128bit_uuid_characteristic_add
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_qwr_init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ips_init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_GetAdvNameLen
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_GetAdvName
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Init
</UL>

<P><STRONG><a name="[5b]"></a>soc_evt_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_ble.o(i.soc_evt_handler))
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(sdh_soc_observers1)
</UL>
<P><STRONG><a name="[3a]"></a>adc_callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_battery.o(i.adc_callback))
<BR>[Address Reference Count : 1]<UL><LI> app_battery.o(i.batt_detect)
</UL>
<P><STRONG><a name="[84]"></a>batt_detect</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, app_battery.o(i.batt_detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = batt_detect &rArr; nrfx_saadc_uninit &rArr; nrfx_saadc_channel_uninit &rArr; nrfx_saadc_limits_set
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_uninit
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_sample_convert
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_channel_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kit_DelayMs
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Batt_Init
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batt_low_check_handle
</UL>

<P><STRONG><a name="[2a]"></a>batt_low_check_handle</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, app_battery.o(i.batt_low_check_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = batt_low_check_handle &rArr; Idc_SetType &rArr; Motor_Ctrl &rArr; motor_timer_handle &rArr; motor_on &rArr; nrfx_pwm_init &rArr; configure_pins
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batt_detect
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idc_SetType
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_GetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_battery.o(i.Batt_Init)
</UL>
<P><STRONG><a name="[29]"></a>aps_cmd_loop</STRONG> (Thumb, 378 bytes, Stack size 256 bytes, app_aps.o(i.aps_cmd_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = aps_cmd_loop &rArr; cmd_send_and_listen &rArr; Subg_SendPkt &rArr; omnipod_tx &rArr; Rf69_SetMode &rArr; spi_read_reg &rArr; spi_select &rArr; nrf_drv_spi_init &rArr; nrfx_spim_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subg_SetPreamble
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subg_SendPkt
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subg_GetTxPktCnt
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subg_GetRxPktCnt
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subg_GetMode
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subg_ClrIntFlg
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subg_CfgRf
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kit_ReverseTwoBytes
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kit_ReverseFourBytes
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kit_FifoStructOut
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_set_preamble
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bytes_to_ble
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_byte_to_ble
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encrypt_set
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encrypt_encode
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_update_reg
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_send_and_listen
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_pkt
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_aps.o(i.Aps_Init)
</UL>
<P><STRONG><a name="[15f]"></a>check_and_set_freq</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, app_aps.o(i.check_and_set_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = check_and_set_freq &rArr; Subg_SetFreq &rArr; Rf69_SetFreq &rArr; Rf69_SetMode &rArr; spi_read_reg &rArr; spi_select &rArr; nrf_drv_spi_init &rArr; nrfx_spim_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subg_SetMode
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subg_SetFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_update_reg
</UL>

<P><STRONG><a name="[10a]"></a>cmd_get_pkt</STRONG> (Thumb, 146 bytes, Stack size 344 bytes, app_aps.o(i.cmd_get_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = cmd_get_pkt &rArr; send_bytes_to_ble &rArr; Ble_IpsNotifyRespCntAndSendData &rArr; ble_ips_data_send
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subg_GetRxPktCnt
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subg_GetRssi
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subg_GetPkt
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kit_ReverseFourBytes
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encrypt_decode
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bytes_to_ble
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_byte_to_ble
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_rssi_to_cc111x
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kit_PrintBytes
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aps_cmd_loop
</UL>

<P><STRONG><a name="[10e]"></a>cmd_send_and_listen</STRONG> (Thumb, 278 bytes, Stack size 464 bytes, app_aps.o(i.cmd_send_and_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = cmd_send_and_listen &rArr; Subg_SendPkt &rArr; omnipod_tx &rArr; Rf69_SetMode &rArr; spi_read_reg &rArr; spi_select &rArr; nrf_drv_spi_init &rArr; nrfx_spim_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subg_SendPkt
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subg_GetRxPktCnt
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subg_GetRssi
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subg_GetPkt
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subg_GetMode
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kit_ReverseTwoBytes
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kit_ReverseFourBytes
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encrypt_decode
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bytes_to_ble
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_byte_to_ble
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encrypt_encode
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_rssi_to_cc111x
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kit_PrintBytes
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aps_cmd_loop
</UL>

<P><STRONG><a name="[7d]"></a>cmd_update_reg</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, app_aps.o(i.cmd_update_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = cmd_update_reg &rArr; send_byte_to_ble &rArr; Ble_IpsNotifyRespCntAndSendData &rArr; ble_ips_data_send
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subg_SetPktLen
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subg_SetMode
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subg_GetMode
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subg_CfgRf
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_byte_to_ble
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_set_freq
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aps_cmd_loop
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aps_PutCmd
</UL>

<P><STRONG><a name="[163]"></a>convert_rssi_to_cc111x</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_aps.o(i.convert_rssi_to_cc111x))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_send_and_listen
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_pkt
</UL>

<P><STRONG><a name="[10d]"></a>encrypt_encode</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, app_aps.o(i.encrypt_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = encrypt_encode &rArr; encode_manchester
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_manchester
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_4b6b
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_send_and_listen
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aps_cmd_loop
</UL>

<P><STRONG><a name="[10f]"></a>encrypt_set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_aps.o(i.encrypt_set))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aps_cmd_loop
</UL>

<P><STRONG><a name="[110]"></a>send_byte_to_ble</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_aps.o(i.send_byte_to_ble))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = send_byte_to_ble &rArr; Ble_IpsNotifyRespCntAndSendData &rArr; ble_ips_data_send
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_IpsNotifyRespCntAndSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_set_preamble
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_update_reg
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_send_and_listen
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_pkt
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aps_cmd_loop
</UL>

<P><STRONG><a name="[116]"></a>send_bytes_to_ble</STRONG> (Thumb, 48 bytes, Stack size 168 bytes, app_aps.o(i.send_bytes_to_ble))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = send_bytes_to_ble &rArr; Ble_IpsNotifyRespCntAndSendData &rArr; ble_ips_data_send
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_IpsNotifyRespCntAndSendData
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_send_and_listen
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_pkt
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aps_cmd_loop
</UL>

<P><STRONG><a name="[33]"></a>motor_test_handle</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_indication.o(i.motor_test_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = motor_test_handle &rArr; Motor_Ctrl &rArr; motor_timer_handle &rArr; motor_on &rArr; nrfx_pwm_init &rArr; configure_pins
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Ctrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_indication.o(i.Idc_Init)
</UL>
<P><STRONG><a name="[34]"></a>state_check_handle</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_indication.o(i.state_check_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = state_check_handle &rArr; Idc_SetType &rArr; Motor_Ctrl &rArr; motor_timer_handle &rArr; motor_on &rArr; nrfx_pwm_init &rArr; configure_pins
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Batt_IsLow
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idc_SetType
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_GetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_indication.o(i.Idc_Init)
</UL>
<P><STRONG><a name="[e8]"></a>minimed_rx</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, app_subg.o(i.minimed_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = minimed_rx &rArr; Rf69_SetPayloadLen &rArr; spi_read_reg &rArr; spi_select &rArr; nrf_drv_spi_init &rArr; nrfx_spim_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_GetState
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_GetCnt
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_SetPayloadLen
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_SetMode
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_ReadRssi
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_RcvByte
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_IsFifoEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subg_GetPkt
</UL>

<P><STRONG><a name="[ed]"></a>minimed_tx</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, app_subg.o(i.minimed_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = minimed_tx &rArr; Rf69_XmitBuf &rArr; spi_select &rArr; nrf_drv_spi_init &rArr; nrfx_spim_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kit_DelayMs
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_XmitByte
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_XmitBuf
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_SetMode
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_IsFifoEmpty
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_ClearFifo
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_fifo_not_full
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subg_SendPkt
</UL>

<P><STRONG><a name="[e7]"></a>omnipod_rx</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, app_subg.o(i.omnipod_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = omnipod_rx &rArr; Rf69_SetSyncOnOff &rArr; spi_read_reg &rArr; spi_select &rArr; nrf_drv_spi_init &rArr; nrfx_spim_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_GetState
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_GetCnt
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_SetSyncOnOff
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_SetPayloadLen
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_SetMode
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_ReadRssi
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_RcvByte
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_IsFifoEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subg_GetPkt
</UL>

<P><STRONG><a name="[ec]"></a>omnipod_tx</STRONG> (Thumb, 270 bytes, Stack size 288 bytes, app_subg.o(i.omnipod_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = omnipod_tx &rArr; Rf69_SetMode &rArr; spi_read_reg &rArr; spi_select &rArr; nrf_drv_spi_init &rArr; nrfx_spim_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kit_DelayMs
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_GetCnt
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_XmitByte
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_SetMode
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_IsFifoOverThreshold
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_IsFifoFull
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_IsFifoEmpty
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_ClearFifo
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kit_DelayUs
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subg_SendPkt
</UL>

<P><STRONG><a name="[e6]"></a>rf_stop</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_subg.o(i.rf_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = rf_stop &rArr; Rf69_SetMode &rArr; spi_read_reg &rArr; spi_select &rArr; nrf_drv_spi_init &rArr; nrfx_spim_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subg_SendPkt
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subg_GetPkt
</UL>

<P><STRONG><a name="[17b]"></a>wait_fifo_not_full</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, app_subg.o(i.wait_fifo_not_full))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = wait_fifo_not_full &rArr; Rf69_IsFifoFull &rArr; spi_read_reg &rArr; spi_select &rArr; nrf_drv_spi_init &rArr; nrfx_spim_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kit_DelayMs
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_IsFifoFull
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minimed_tx
</UL>

<P><STRONG><a name="[32]"></a>fct_req_loop</STRONG> (Thumb, 252 bytes, Stack size 56 bytes, app_factory.o(i.fct_req_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = fct_req_loop &rArr; subg_send_and_listen &rArr; Subg_SendPkt &rArr; omnipod_tx &rArr; Rf69_SetMode &rArr; spi_read_reg &rArr; spi_select &rArr; nrf_drv_spi_init &rArr; nrfx_spim_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subg_ClrIntFlg
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kit_FifoStructOut
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Batt_GetLevel
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_NusSendData
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subg_send_and_listen
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sn_burn
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Ctrl
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Ctrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_factory.o(i.Fct_Init)
</UL>
<P><STRONG><a name="[171]"></a>sn_burn</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, app_factory.o(i.sn_burn))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sn_burn &rArr; Ble_NusSendData &rArr; ble_nus_data_send &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_NusSendData
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fct_req_loop
</UL>

<P><STRONG><a name="[170]"></a>subg_send_and_listen</STRONG> (Thumb, 448 bytes, Stack size 56 bytes, app_factory.o(i.subg_send_and_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = subg_send_and_listen &rArr; Subg_SendPkt &rArr; omnipod_tx &rArr; Rf69_SetMode &rArr; spi_read_reg &rArr; spi_select &rArr; nrf_drv_spi_init &rArr; nrfx_spim_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subg_SetMode
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subg_SetFreq
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subg_SendPkt
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subg_GetRssi
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subg_GetPkt
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kit_PrintBytes
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_NusSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fct_req_loop
</UL>

<P><STRONG><a name="[30]"></a>cfg_req_loop</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, app_config.o(i.cfg_req_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = cfg_req_loop &rArr; motion_data_set &rArr; Motor_Ctrl &rArr; motor_timer_handle &rArr; motor_on &rArr; nrfx_pwm_init &rArr; configure_pins
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kit_FifoStructOut
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Batt_GetVoltage
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_NusSendData
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_data_set
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Ctrl
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_config.o(i.Cfg_Init)
</UL>
<P><STRONG><a name="[31]"></a>cfg_update_handle</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_config.o(i.cfg_update_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cfg_update_handle &rArr; Flash_Write &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_config.o(i.Cfg_Init)
</UL>
<P><STRONG><a name="[15c]"></a>motion_data_set</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, app_config.o(i.motion_data_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = motion_data_set &rArr; Motor_Ctrl &rArr; motor_timer_handle &rArr; motor_on &rArr; nrfx_pwm_init &rArr; configure_pins
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_NusSendData
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Ctrl
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_req_loop
</UL>

<P><STRONG><a name="[126]"></a>ble_device_addr_encode</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ble_advdata.o(i.ble_device_addr_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_device_addr_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[129]"></a>conn_int_encode</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, ble_advdata.o(i.conn_int_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = conn_int_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[12a]"></a>manuf_specific_data_encode</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, ble_advdata.o(i.manuf_specific_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = manuf_specific_data_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[12c]"></a>name_encode</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, ble_advdata.o(i.name_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = name_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[12b]"></a>service_data_encode</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, ble_advdata.o(i.service_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = service_data_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[127]"></a>uint16_encode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_advdata.o(i.uint16_encode))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
</UL>

<P><STRONG><a name="[128]"></a>uuid_list_encode</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, ble_advdata.o(i.uuid_list_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[1bf]"></a>uuid_list_sized_encode</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, ble_advdata.o(i.uuid_list_sized_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
</UL>

<P><STRONG><a name="[131]"></a>flags_set</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ble_advertising.o(i.flags_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[12f]"></a>phy_is_valid</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_advertising.o(i.phy_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[130]"></a>use_whitelist</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ble_advertising.o(i.use_whitelist))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[50]"></a>ble_evt_handler</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, ble_conn_params.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = ble_evt_handler &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_conn_params_ok
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_get
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_params.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[14a]"></a>conn_params_negotiation</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ble_conn_params.o(i.conn_params_negotiation))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = conn_params_negotiation &rArr; app_timer_start &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[147]"></a>instance_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_conn_params.o(i.instance_get))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_timeout_handler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[148]"></a>is_conn_params_ok</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, ble_conn_params.o(i.is_conn_params_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = is_conn_params_ok
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[149]"></a>send_error_evt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_conn_params.o(i.send_error_evt))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_timeout_handler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[3b]"></a>update_timeout_handler</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ble_conn_params.o(i.update_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = update_timeout_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_params.o(i.ble_conn_params_init)
</UL>
<P><STRONG><a name="[4d]"></a>ble_evt_handler</STRONG> (Thumb, 254 bytes, Stack size 128 bytes, ble_conn_state.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ble_evt_handler &rArr; conn_handle_list_get
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_and
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_set
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_clear
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_handle_list_get
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_state.o(sdh_ble_observers0)
</UL>
<P><STRONG><a name="[15e]"></a>set_security_req</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ble_srv_common.o(i.set_security_req))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;descriptor_add
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characteristic_add
</UL>

<P><STRONG><a name="[189]"></a>link_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_ble_gatt.o(i.link_init))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_init
</UL>

<P><STRONG><a name="[18a]"></a>user_mem_reply</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nrf_ble_qwr.o(i.user_mem_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = user_mem_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_qwr_on_ble_evt
</UL>

<P><STRONG><a name="[3c]"></a>dummy_evt_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_dfu.o(i.dummy_evt_handler))
<BR>[Address Reference Count : 1]<UL><LI> ble_dfu.o(i.ble_dfu_buttonless_init)
</UL>
<P><STRONG><a name="[142]"></a>on_rw_authorize_req</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, ble_dfu.o(i.on_rw_authorize_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = on_rw_authorize_req &rArr; ble_dfu_buttonless_on_ctrl_pt_write &rArr; ble_dfu_buttonless_resp_send
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_on_ctrl_pt_write
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_on_ble_evt
</UL>

<P><STRONG><a name="[11d]"></a>battery_level_char_add</STRONG> (Thumb, 156 bytes, Stack size 80 bytes, ble_bas.o(i.battery_level_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = battery_level_char_add &rArr; characteristic_add
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;descriptor_add
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characteristic_add
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_report_ref_encode
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_init
</UL>

<P><STRONG><a name="[132]"></a>battery_notification_send</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_bas.o(i.battery_notification_send))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_battery_level_update
</UL>

<P><STRONG><a name="[155]"></a>on_connect</STRONG> (Thumb, 106 bytes, Stack size 64 bytes, ble_nus.o(i.on_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = on_connect &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blcm_link_ctx_get
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
</UL>

<P><STRONG><a name="[156]"></a>on_write</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, ble_nus.o(i.on_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = on_write &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blcm_link_ctx_get
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
</UL>

<P><STRONG><a name="[161]"></a>clock_clk_started_notify</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.clock_clk_started_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clock_clk_started_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_evt_handler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_irq_handler
</UL>

<P><STRONG><a name="[3e]"></a>clock_irq_handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.clock_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clock_irq_handler &rArr; clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_clock.o(i.nrf_drv_clock_init)
</UL>
<P><STRONG><a name="[5f]"></a>sd_state_evt_handler</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.sd_state_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = sd_state_evt_handler &rArr; nrf_drv_clock_lfclk_release &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_enable
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_clock.o(sdh_state_observers0)
</UL>
<P><STRONG><a name="[58]"></a>soc_evt_handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.soc_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = soc_evt_handler &rArr; clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_clock.o(sdh_soc_observers0)
</UL>
<P><STRONG><a name="[1a7]"></a>nrf_clock_event_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrf_clock_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_irq_handler
</UL>

<P><STRONG><a name="[1a8]"></a>nrf_clock_event_clear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrfx_clock.o(i.nrf_clock_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_clock_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_irq_handler
</UL>

<P><STRONG><a name="[1ab]"></a>prs_box_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_prs.o(i.prs_box_get))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_release
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
</UL>

<P><STRONG><a name="[3f]"></a>spim_evt_handler</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, nrf_drv_spi.o(i.spim_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spim_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_spi.o(i.nrf_drv_spi_init)
</UL>
<P><STRONG><a name="[19b]"></a>nrf_gpio_cfg</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrfx_spim.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_uninit
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_init
</UL>

<P><STRONG><a name="[19a]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrfx_spim.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_init
</UL>

<P><STRONG><a name="[e0]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_spim.o(i.nrf_gpio_pin_clear))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_xfer
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM0_SPIS0_SPI0_IRQHandler
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_init
</UL>

<P><STRONG><a name="[e1]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_spim.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_xfer
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM0_SPIS0_SPI0_IRQHandler
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_init
</UL>

<P><STRONG><a name="[df]"></a>nrf_spim_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_spim.o(i.nrf_spim_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_uninit
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM0_SPIS0_SPI0_IRQHandler
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
</UL>

<P><STRONG><a name="[1bb]"></a>nrfx_is_in_ram</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrfx_spim.o(i.nrfx_is_in_ram))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
</UL>

<P><STRONG><a name="[1b7]"></a>spim_xfer</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, nrfx_spim.o(i.spim_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_is_in_ram
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_check
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_xfer
</UL>

<P><STRONG><a name="[f6]"></a>nrf_timer_event_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrfx_timer.o(i.nrf_timer_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_timer_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_compare
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[1ad]"></a>configure_pins</STRONG> (Thumb, 102 bytes, Stack size 36 bytes, nrfx_pwm.o(i.configure_pins))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = configure_pins
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_pwm_init
</UL>

<P><STRONG><a name="[be]"></a>irq_handler</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, nrfx_pwm.o(i.irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = irq_handler &rArr; nrf_pwm_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwm_event_clear
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwm_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_IRQHandler
</UL>

<P><STRONG><a name="[175]"></a>nrf_pwm_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_pwm.o(i.nrf_pwm_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_pwm_is_stopped
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[176]"></a>nrf_pwm_event_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrfx_pwm.o(i.nrf_pwm_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_pwm_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_pwm_init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_playback
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[1af]"></a>nrf_pwm_sequence_set</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrfx_pwm.o(i.nrf_pwm_sequence_set))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_pwm_simple_playback
</UL>

<P><STRONG><a name="[1b0]"></a>start_playback</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, nrfx_pwm.o(i.start_playback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = start_playback &rArr; nrf_pwm_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwm_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_pwm_simple_playback
</UL>

<P><STRONG><a name="[de]"></a>nrf_saadc_buffer_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_saadc.o(i.nrf_saadc_buffer_init))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_sample_convert
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAADC_IRQHandler
</UL>

<P><STRONG><a name="[1b1]"></a>nrf_saadc_channel_input_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrfx_saadc.o(i.nrf_saadc_channel_input_set))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_sample_convert
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_channel_init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_channel_uninit
</UL>

<P><STRONG><a name="[dc]"></a>nrf_saadc_event_check</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_saadc.o(i.nrf_saadc_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_uninit
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_sample_convert
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAADC_IRQHandler
</UL>

<P><STRONG><a name="[dd]"></a>nrf_saadc_event_clear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrfx_saadc.o(i.nrf_saadc_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_saadc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_sample_convert
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_init
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAADC_IRQHandler
</UL>

<P><STRONG><a name="[1b4]"></a>nrf_saadc_limit_int_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrfx_saadc.o(i.nrf_saadc_limit_int_get))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_limits_set
</UL>

<P><STRONG><a name="[1b5]"></a>nrfx_coredep_delay_us</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_saadc.o(i.nrfx_coredep_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_uninit
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_sample_convert
</UL>

<P><STRONG><a name="[1a9]"></a>nrf_power_event_get_and_clear</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrfx_power.o(i.nrf_power_event_get_and_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_power_event_get_and_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_irq_handler
</UL>

<P><STRONG><a name="[101]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[103]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[107]"></a>NVIC_SetPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_SetPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[102]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[166]"></a>compare_reg_update</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, app_timer.o(i.compare_reg_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = compare_reg_update &rArr; rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[1bc]"></a>elapsed_ticks_acquire</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, app_timer.o(i.elapsed_ticks_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = elapsed_ticks_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[177]"></a>list_insertions_handler</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, app_timer.o(i.list_insertions_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = list_insertions_handler &rArr; timer_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_remove
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[167]"></a>nrfx_coredep_delay_us</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_timer.o(i.nrfx_coredep_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_remove
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[100]"></a>rtc1_stop</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, app_timer.o(i.rtc1_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[e2]"></a>timer_list_handler</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, app_timer.o(i.timer_list_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = timer_list_handler &rArr; list_insertions_handler &rArr; timer_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elapsed_ticks_acquire
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI0_EGU0_IRQHandler
</UL>

<P><STRONG><a name="[179]"></a>timer_list_insert</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, app_timer.o(i.timer_list_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
</UL>

<P><STRONG><a name="[178]"></a>timer_list_remove</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, app_timer.o(i.timer_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
</UL>

<P><STRONG><a name="[108]"></a>timer_stop_op_schedule</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, app_timer.o(i.timer_stop_op_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>

<P><STRONG><a name="[c3]"></a>timer_timeouts_check</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, app_timer.o(i.timer_timeouts_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_timeouts_check
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
</UL>

<P><STRONG><a name="[105]"></a>user_op_alloc</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, app_timer.o(i.user_op_alloc))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
</UL>

<P><STRONG><a name="[19e]"></a>shutdown_process</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, nrf_pwr_mgmt.o(i.shutdown_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = shutdown_process &rArr; nrf_section_iter_next &rArr; nrf_section_iter_item_set
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_shutdown
</UL>

<P><STRONG><a name="[1a6]"></a>nrf_section_iter_item_set</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nrf_section_iter.o(i.nrf_section_iter_item_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_section_iter_item_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
</UL>

<P><STRONG><a name="[49]"></a>erase</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, nrf_fstorage_sd.o(i.erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = erase &rArr; queue_start &rArr; queue_process &rArr; nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_put
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_alloc
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[16f]"></a>event_send</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, nrf_fstorage_sd.o(i.event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = event_send
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[45]"></a>init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, nrf_fstorage_sd.o(i.init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init &rArr; nrf_atomic_flag_set_fetch &rArr; nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set_fetch
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[4c]"></a>is_busy</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.is_busy))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[195]"></a>queue_free</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.queue_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = queue_free &rArr; nrf_atfifo_item_free
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_free
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[194]"></a>queue_process</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, nrf_fstorage_sd.o(i.queue_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = queue_process &rArr; nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_get
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_free
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sdh_state_handler
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
</UL>

<P><STRONG><a name="[16e]"></a>queue_start</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrf_fstorage_sd.o(i.queue_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = queue_start &rArr; queue_process &rArr; nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set_fetch
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
</UL>

<P><STRONG><a name="[47]"></a>read</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_fstorage_sd.o(i.read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = read
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[4a]"></a>rmap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.rmap))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[46]"></a>uninit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrf_fstorage_sd.o(i.uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uninit &rArr; nrf_atfifo_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_clear
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[4b]"></a>wmap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.wmap))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[48]"></a>write</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, nrf_fstorage_sd.o(i.write))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = write &rArr; queue_start &rArr; queue_process &rArr; nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_put
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_alloc
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[197]"></a>addr_is_aligned32</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_fstorage.o(i.addr_is_aligned32))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>

<P><STRONG><a name="[193]"></a>addr_is_within_bounds</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_fstorage.o(i.addr_is_within_bounds))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
</UL>

<P><STRONG><a name="[1ba]"></a>__sd_nvic_app_accessible_irq</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nrf_sdh.o(i.__sd_nvic_app_accessible_irq))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevices_evt_irq_enable
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_evt_irq_disable
</UL>

<P><STRONG><a name="[1a2]"></a>sdh_request_observer_notify</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, nrf_sdh.o(i.sdh_request_observer_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sdh_request_observer_notify &rArr; nrf_section_iter_next &rArr; nrf_section_iter_item_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
</UL>

<P><STRONG><a name="[1a3]"></a>sdh_state_observer_notify</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, nrf_sdh.o(i.sdh_state_observer_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sdh_state_observer_notify &rArr; nrf_section_iter_next &rArr; nrf_section_iter_item_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
</UL>

<P><STRONG><a name="[1a4]"></a>softdevice_evt_irq_disable</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, nrf_sdh.o(i.softdevice_evt_irq_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = softdevice_evt_irq_disable &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_app_accessible_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
</UL>

<P><STRONG><a name="[1a5]"></a>softdevices_evt_irq_enable</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, nrf_sdh.o(i.softdevices_evt_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = softdevices_evt_irq_enable &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_app_accessible_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
</UL>

<P><STRONG><a name="[5d]"></a>nrf_sdh_ble_evts_poll</STRONG> (Thumb, 88 bytes, Stack size 528 bytes, nrf_sdh_ble.o(i.nrf_sdh_ble_evts_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = nrf_sdh_ble_evts_poll &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh_ble.o(sdh_stack_observers0)
</UL>
<P><STRONG><a name="[5e]"></a>nrf_sdh_soc_evts_poll</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, nrf_sdh_soc.o(i.nrf_sdh_soc_evts_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_sdh_soc_evts_poll &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh_soc.o(sdh_stack_observers0)
</UL>
<P><STRONG><a name="[b7]"></a>nrfx_coredep_delay_us</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, kit_delay.o(i.nrfx_coredep_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kit_DelayMs
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kit_DelayUs
</UL>

<P><STRONG><a name="[ba]"></a>led_multiple_control</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, led.o(i.led_multiple_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = led_multiple_control
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Ctrl
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_timer_handle
</UL>

<P><STRONG><a name="[35]"></a>led_timer_handle</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, led.o(i.led_timer_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = led_timer_handle &rArr; app_timer_start &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_multiple_control
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Ctrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(i.Led_Init)
</UL>
<P><STRONG><a name="[bb]"></a>motor_off</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, motor.o(i.motor_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = motor_off &rArr; nrfx_pwm_stop &rArr; nrfx_pwm_is_stopped
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_pwm_uninit
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_pwm_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Ctrl
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_timer_handle
</UL>

<P><STRONG><a name="[17c]"></a>motor_on</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, motor.o(i.motor_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = motor_on &rArr; nrfx_pwm_init &rArr; configure_pins
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_pwm_simple_playback
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_pwm_init
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_timer_handle
</UL>

<P><STRONG><a name="[36]"></a>motor_timer_handle</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, motor.o(i.motor_timer_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = motor_timer_handle &rArr; motor_on &rArr; nrfx_pwm_init &rArr; configure_pins
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_on
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_off
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Ctrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor.o(i.Motor_Init)
</UL>
<P><STRONG><a name="[0]"></a>flash_event_handle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ocp.o(i.flash_event_handle))
<BR>[Address Reference Count : 1]<UL><LI> ocp.o(fs_data)
</UL>
<P><STRONG><a name="[37]"></a>timr_evt_handle</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ocp.o(i.timr_evt_handle))
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_wdt_channel_feed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ocp.o(i.Timer_Init)
</UL>
<P><STRONG><a name="[ad]"></a>wait_flash_ready</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ocp.o(i.wait_flash_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wait_flash_ready &rArr; nrf_fstorage_is_busy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_is_busy
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_run
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
</UL>

<P><STRONG><a name="[38]"></a>wdt_event_handle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ocp.o(i.wdt_event_handle))
<BR>[Address Reference Count : 1]<UL><LI> ocp.o(i.Wdt_Init)
</UL>
<P><STRONG><a name="[d7]"></a>nrf_drv_spi_transfer</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, rf69.o(i.nrf_drv_spi_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nrf_drv_spi_transfer &rArr; nrfx_spim_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_XmitBuf
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_reg
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_reg
</UL>

<P><STRONG><a name="[199]"></a>nrf_gpio_cfg</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, rf69.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
</UL>

<P><STRONG><a name="[198]"></a>nrf_gpio_cfg_default</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rf69.o(i.nrf_gpio_cfg_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_unselect
</UL>

<P><STRONG><a name="[19c]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, rf69.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_select
</UL>

<P><STRONG><a name="[c9]"></a>spi_read_reg</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, rf69.o(i.spi_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = spi_read_reg &rArr; spi_select &rArr; nrf_drv_spi_init &rArr; nrfx_spim_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_unselect
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_select
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_SetUnlimitedLenPkt
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_SetSyncOnOff
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_SetPayloadLen
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_SetMode
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_ReadRssi
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_RcvByte
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_IsFifoOverThreshold
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_IsFifoFull
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_IsFifoEmpty
</UL>

<P><STRONG><a name="[d6]"></a>spi_select</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rf69.o(i.spi_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = spi_select &rArr; nrf_drv_spi_init &rArr; nrfx_spim_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_XmitBuf
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_reg
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_reg
</UL>

<P><STRONG><a name="[d8]"></a>spi_unselect</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rf69.o(i.spi_unselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = spi_unselect &rArr; nrfx_spim_uninit &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_uninit
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_XmitBuf
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_reg
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_reg
</UL>

<P><STRONG><a name="[c5]"></a>spi_write_reg</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, rf69.o(i.spi_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = spi_write_reg &rArr; spi_select &rArr; nrf_drv_spi_init &rArr; nrfx_spim_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_unselect
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_select
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_XmitByte
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_SetUnlimitedLenPkt
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_SetSyncOnOff
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_SetPreambleSize
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_SetPayloadLen
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_SetOokBw250khz
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_SetOokBw200khz
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_SetMode
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_SetFreq
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_ReadRssi
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_DevParaCfg
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf69_ClearFifo
</UL>

<P><STRONG><a name="[99]"></a>buzzer_off</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, buzzer.o(i.buzzer_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = buzzer_off &rArr; nrfx_pwm_stop &rArr; nrfx_pwm_is_stopped
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_pwm_uninit
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_pwm_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Ctrl
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_timer_handle
</UL>

<P><STRONG><a name="[159]"></a>buzzer_on</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, buzzer.o(i.buzzer_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = buzzer_on &rArr; nrfx_pwm_init &rArr; configure_pins
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_pwm_simple_playback
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_pwm_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_timer_handle
</UL>

<P><STRONG><a name="[2f]"></a>buzzer_timer_handle</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, buzzer.o(i.buzzer_timer_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = buzzer_timer_handle &rArr; buzzer_on &rArr; nrfx_pwm_init &rArr; configure_pins
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_on
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_off
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Ctrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> buzzer.o(i.Buzzer_Init)
</UL>
<P><STRONG><a name="[3d]"></a>ble_ips_timer_tick_handle</STRONG> (Thumb, 118 bytes, Stack size 56 bytes, ble_ips.o(i.ble_ips_timer_tick_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ble_ips_timer_tick_handle &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blcm_link_ctx_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_ips.o(i.ble_ips_init)
</UL>
<P><STRONG><a name="[153]"></a>on_connect</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, ble_ips.o(i.on_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = on_connect &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blcm_link_ctx_get
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ips_on_ble_evt
</UL>

<P><STRONG><a name="[152]"></a>on_write</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, ble_ips.o(i.on_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = on_write &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blcm_link_ctx_get
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ips_on_ble_evt
</UL>

<P><STRONG><a name="[151]"></a>user_128bit_uuid_characteristic_add</STRONG> (Thumb, 410 bytes, Stack size 96 bytes, ble_ips.o(i.user_128bit_uuid_characteristic_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = user_128bit_uuid_characteristic_add
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_set_security_req
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ips_init
</UL>

<P><STRONG><a name="[1be]"></a>user_set_security_req</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ble_ips.o(i.user_set_security_req))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_128bit_uuid_characteristic_add
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
